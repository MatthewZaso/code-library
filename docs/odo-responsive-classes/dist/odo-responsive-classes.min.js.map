{"version":3,"file":"odo-responsive-classes.min.js","sources":["../src/responsive-classes-element.js","../src/responsive-classes.js"],"sourcesContent":["import OdoResponsiveAttributes from '@odopod/odo-responsive-attributes';\n\nclass ResponsiveClassesElement {\n\n  constructor(element) {\n    /**\n     * Main element.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Read responsive attributes on the main element.\n     * e.g. `data-class.md=\"foo\"`.\n     * @type {OdoResponsiveAttributes}\n     * @private\n     */\n    this._attributes = new OdoResponsiveAttributes(element, 'class');\n  }\n\n  /**\n   * Add multiple classes to the main element.\n   * @param {string[]} classesToAdd Classes to add.\n   */\n  _addAllClasses(classesToAdd) {\n    this.element.classList.add(...classesToAdd);\n  }\n\n  /**\n  * Remove multiple classes to the main element.\n  * @param {string[]} classesToRemove Classes to add.\n  */\n  _removeAllClasses(classesToRemove) {\n    Object.keys(classesToRemove).forEach((breakpoint) => {\n      if (classesToRemove[breakpoint]) {\n        this.element.classList.remove(...classesToRemove[breakpoint].split(' '));\n      }\n    });\n  }\n\n  /**\n   * Split read and writing to and from the DOM into separate methods so that\n   * reads can be batched together and writes can be batched together. This\n   * avoids layout thrashing.\n   */\n  read() {\n    this._attributes.update();\n  }\n\n  /**\n   * Update current classes on the element.\n   */\n  write() {\n    this._removeAllClasses(this._attributes.values);\n    this._addAllClasses(this._attributes.currentValue.split(' '));\n  }\n\n  /**\n   * Cleanup.\n   */\n  dispose() {\n    this._attributes.dispose();\n    this.element = null;\n  }\n}\n\nexport default ResponsiveClassesElement;\n","import OdoBaseComponent from '@odopod/odo-base-component';\nimport ResponsiveClassesElement from './responsive-classes-element';\n\nclass ResponsiveClasses extends OdoBaseComponent {\n\n  constructor() {\n    super(document.body, true);\n    this.items = [];\n    this.initializeAll();\n  }\n\n  /**\n   * When the browser matches a new media query, update.\n   * @override\n   */\n  onMediaQueryChange() {\n    this.process();\n  }\n\n  /**\n   * Dispose of class name switchers.\n   * @param {ArrayLike.<Element>} elements Array of class name switcher elements.\n   */\n  removeAll(elements) {\n    const els = Array.from(elements);\n    const items = this.items.filter(item => els.indexOf(item.element) > -1);\n\n    items.forEach((item) => {\n      this.items.splice(this.items.indexOf(item), 1);\n      item.dispose();\n    });\n  }\n\n  /**\n  * Create instances to track.\n  * @param {ArrayLike.<Element>} elements\n  */\n  addAll(elements) {\n    const newItems = [];\n\n    for (let i = 0, len = elements.length; i < len; i++) {\n      newItems.push(new ResponsiveClassesElement(elements[i]));\n    }\n\n    // Merge new items into current items.\n    this.items = this.items.concat(newItems);\n\n    this.process();\n  }\n\n  /**\n   * Initializes all ResponsiveClasses instances on the page or within the given\n   * context.\n   *\n   * @param {Element} [context] Optionally provide the context (scope)\n   *     for the query. Default is the body.\n   */\n  initializeAll(context = document.body) {\n    this.addAll(context.querySelectorAll('.odo-responsive-classes'));\n  }\n\n  /**\n   * Dispose of all ResponsiveClassesElement instances from within a context.\n   * @param {Element} context Scope for the query.\n   */\n  disposeAll(context) {\n    this.removeAll(context.querySelectorAll('.odo-responsive-classes'));\n  }\n\n  /**\n   * By reading values from the DOM all at once, then writing to the DOM all at\n   * once, layout thrashing is avoided, optimizing this code path.\n   */\n  process() {\n    this.items.forEach((item) => {\n      item.read();\n    });\n\n    this.items.forEach((item) => {\n      item.write();\n    });\n  }\n}\n\nexport default new ResponsiveClasses();\n"],"names":["ResponsiveClassesElement","element","_attributes","OdoResponsiveAttributes","_addAllClasses","classesToAdd","classList","add","_removeAllClasses","classesToRemove","keys","forEach","breakpoint","remove","split","read","update","write","this","values","currentValue","dispose","_OdoBaseComponent","document","body","items","initializeAll","onMediaQueryChange","process","removeAll","elements","els","Array","from","filter","indexOf","item","splice","_this2","addAll","newItems","i","len","length","push","concat","context","querySelectorAll","disposeAll","OdoBaseComponent"],"mappings":"0pCAEMA,wBAEQC,kBAKLA,QAAUA,OAQVC,YAAc,IAAIC,EAAwBF,EAAS,4BAO1DG,wBAAeC,iBACRJ,QAAQK,WAAUC,cAAOF,iBAOhCG,2BAAkBC,qBACTC,KAAKD,GAAiBE,QAAQ,SAACC,MAChCH,EAAgBG,GAAa,YAC1BX,QAAQK,WAAUO,iBAAUJ,EAAgBG,GAAYE,MAAM,uBAUzEC,qBACOb,YAAYc,sBAMnBC,sBACOT,kBAAkBU,KAAKhB,YAAYiB,aACnCf,eAAec,KAAKhB,YAAYkB,aAAaN,MAAM,mBAM1DO,wBACOnB,YAAYmB,eACZpB,QAAU,kBCsBJ,oDA9EXqB,YAAMC,SAASC,MAAM,aAChBC,WACAC,4CAOPC,mCACOC,uBAOPC,mBAAUC,cACFC,EAAMC,MAAMC,KAAKH,GACTZ,KAAKO,MAAMS,OAAO,mBAAQH,EAAII,QAAQC,EAAKnC,UAAY,IAE/DU,QAAQ,SAACyB,KACRX,MAAMY,OAAOC,EAAKb,MAAMU,QAAQC,GAAO,KACvCf,yBAQTkB,gBAAOT,OAGA,IAFCU,KAEGC,EAAI,EAAGC,EAAMZ,EAASa,OAAQF,EAAIC,EAAKD,MACrCG,KAAK,IAAI5C,EAAyB8B,EAASW,UAIjDhB,MAAQP,KAAKO,MAAMoB,OAAOL,QAE1BZ,uBAUPF,6BAAcoB,yDAAUvB,SAASC,UAC1Be,OAAOO,EAAQC,iBAAiB,yCAOvCC,oBAAWF,QACJjB,UAAUiB,EAAQC,iBAAiB,yCAO1CnB,wBACOH,MAAMd,QAAQ,SAACyB,KACbrB,cAGFU,MAAMd,QAAQ,SAACyB,KACbnB,cA5EqBgC"}