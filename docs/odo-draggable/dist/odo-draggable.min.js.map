{"version":3,"file":"odo-draggable.min.js","sources":["../src/settings.js","../src/draggable.js"],"sourcesContent":["import OdoPointer from '@odopod/odo-pointer';\n\nexport default {\n  /** @enum {string} */\n  EventType: {\n    START: 'ododraggable:start',\n    MOVE: 'ododraggable:move',\n    END: 'ododraggable:end',\n    SETTLE: 'ododraggable:throwsettle',\n  },\n\n  Classes: {\n    GRABBABLE: 'grabbable',\n    GRABBING: 'grabbing',\n  },\n\n  Defaults: {\n    // Draggable axis.\n    axis: OdoPointer.Axis.X,\n\n    // Amplifies throw velocity by this value. Higher values make the throwable\n    // travel farther and faster.\n    amplifier: 24,\n\n    // Once the velocity has gone below this threshold, throwing stops.\n    velocityStop: 0.08,\n\n    // On each throw frame, the velocity is multiplied by this friction value.\n    // It must be less than 1. Higher values let the throwable slide farther and longer.\n    throwFriction: 0.94,\n\n    // Whether the draggable will keep its movement momentum after the user releases.\n    isThrowable: false,\n  },\n};\n","import TinyEmitter from 'tiny-emitter';\nimport OdoDevice from '@odopod/odo-device';\nimport OdoPointer from '@odopod/odo-pointer';\nimport {\n  clamp,\n  Coordinate,\n  defaultsTo,\n  getMarginBox,\n  getPaddingBox,\n  getSize,\n  Rect,\n} from '@odopod/odo-helpers';\nimport settings from './settings';\n\n/**\n * Throws an error if `condition` is falsy.\n * @param {boolean} condition The condition to test.\n * @param {string} message Error message.\n * @throws {Error} If condition is falsy.\n * @private\n */\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Ensure the containing element has a width and height.\n * @param {Object} obj Object to test.\n */\nfunction ensureObjectHasSize(obj) {\n  assert(obj.width > 0, 'containing element\\'s width is zero');\n  assert(obj.height > 0, 'containing element\\'s height is zero');\n}\n\nclass Draggable extends TinyEmitter {\n  constructor(element, options = {}) {\n    super();\n\n    /**\n     * The draggable element.\n     * @type {HTMLElement}\n     * @private\n     */\n    this.element = element;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Draggable.Defaults, options);\n\n    /**\n     * The element which contains the target.\n     * @type {HTMLElement}\n     * @private\n     */\n    this._parentEl = element.parentNode;\n\n    /**\n     * Current position of the handle/target.\n     * @type {Coordinate}\n     * @private\n     */\n    this._currentPosition = new Coordinate();\n\n    /**\n     * Starting location of the drag.\n     * @type {Coordinate}\n     * @private\n     */\n    this._relativeZero = new Coordinate();\n\n    /**\n     * Velocity at which the draggable was thrown. This value decays over time\n     * after a throw.\n     * @private\n     * @type {Coordinate}\n     */\n    this._throwVelocity = new Coordinate();\n\n    /**\n     * The change in position from the start of the drag.\n     * @private\n     * @type {Coordinate}\n     */\n    this._delta = new Coordinate();\n\n    /**\n     * Animation frame id.\n     * @private\n     * @type {number}\n     */\n    this._requestId = 0;\n\n    /**\n     * The size of the containing element. This element is used to determine\n     * the percentage position of the draggable element.\n     * @type {Object}\n     */\n    this._container = { width: 0, height: 0 };\n\n    /**\n     * Limits of how far the draggable element can be dragged.\n     * @type {Rect}\n     */\n    this.limits = new Rect(NaN, NaN, NaN, NaN);\n\n    this.pointer = new OdoPointer(element, {\n      axis: this.options.axis,\n    });\n\n    this.element.classList.add(Draggable.Classes.GRABBABLE);\n\n    // Kick off.\n    this._listen();\n  }\n\n  _listen() {\n    this._onStart = this._handleDragStart.bind(this);\n    this._onMove = this._handleDragMove.bind(this);\n    this._onEnd = this._handleDragEnd.bind(this);\n\n    this.pointer.on(OdoPointer.EventType.START, this._onStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onEnd);\n  }\n\n  /**\n   * Saves the containment element's width and height and scrubber position.\n   * @private\n   */\n  _saveDimensions() {\n    this._container = getSize(this.element);\n    ensureObjectHasSize(this._container);\n    this._relativeZero = this._getRelativeZero();\n  }\n\n  /**\n   * The position relative to the rest of the page. When it's first\n   * initialized, it is zero zero, but after dragging, it is the position\n   * relative to zero zero.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getRelativeZero() {\n    return Coordinate.difference(\n      this._getDraggablePosition(),\n      this._getOffsetCorrection(),\n    );\n  }\n\n  _getDraggablePosition() {\n    const elRect = this.element.getBoundingClientRect();\n    return new Coordinate(elRect.left, elRect.top);\n  }\n\n  /**\n   * Because the draggable element gets moved around and repositioned,\n   * the bounding client rect method and the offset left and top properties\n   * are unreliable once the element has been dragged once. This method uses\n   * the bounding client rect of the parent element to get a \"correction\"\n   * value.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getOffsetCorrection() {\n    // getBoundingClientRect does not include margins. They must be accounted for.\n    const containmentRect = this._parentEl.getBoundingClientRect();\n    const paddings = getPaddingBox(this._parentEl);\n    const margins = getMarginBox(this.element);\n    const offsetCorrectionX = margins.left + paddings.left + containmentRect.left;\n    const offsetCorrectionY = margins.top + paddings.top + containmentRect.top;\n    return new Coordinate(offsetCorrectionX, offsetCorrectionY);\n  }\n\n  /**\n   * Sets the current position coordinate to a new coordinate.\n   * @param {Coordinate} position Where the x and y values are a percentage.\n   *     e.g. 50 for \"50%\".\n   */\n  _setCurrentPosition(position) {\n    this.pointer.applyFriction(position);\n    const x = this._limitX((position.x / 100) * this._parentEl.offsetWidth);\n    const y = this._limitY((position.y / 100) * this._parentEl.offsetHeight);\n    this._currentPosition = this._getAxisCoordinate(Math.round(x), Math.round(y));\n  }\n\n  /**\n   * Clamp the x or y value.\n   * @param {number} value X or Y value.\n   * @param {number} rectPosition The limits starting edge. (left or top).\n   * @param {number} rectSize The limits dimension. (width or height).\n   * @return {number} The clamped number.\n   */\n  static _limitValue(value, rectPosition, rectSize) {\n    const side = defaultsTo(rectPosition, null, !Number.isNaN(rectPosition));\n    const dimension = defaultsTo(rectSize, 0, !Number.isNaN(rectSize));\n    const max = defaultsTo(side + dimension, Infinity, side !== null);\n    const min = defaultsTo(side, -Infinity, side !== null);\n    return clamp(value, min, max);\n  }\n\n  /**\n   * Returns the 'real' x after limits are applied (allows for some\n   * limits to be undefined).\n   * @param {number} x X-coordinate to limit.\n   * @return {number} The 'real' X-coordinate after limits are applied.\n   */\n  _limitX(x) {\n    return Draggable._limitValue(x, this.limits.left, this.limits.width);\n  }\n\n  /**\n   * Returns the 'real' y after limits are applied (allows for some\n   * limits to be undefined).\n   * @param {number} y Y-coordinate to limit.\n   * @return {number} The 'real' Y-coordinate after limits are applied.\n   */\n  _limitY(y) {\n    return Draggable._limitValue(y, this.limits.top, this.limits.height);\n  }\n\n  /**\n   * Returns the x and y positions the draggable element should be set to.\n   * @param {Coordinate=} optPosition Position to set the draggable\n   *     element. This will optionally override calculating the position\n   *     from a drag.\n   * @return {!Coordinate} The x and y coordinates.\n   * @private\n   */\n  _getElementPosition(optPosition) {\n    if (optPosition) {\n      this._setCurrentPosition(optPosition);\n    }\n\n    const newX = (this._currentPosition.x / this._container.width) * 100;\n    const newY = (this._currentPosition.y / this._container.height) * 100;\n\n    return this._getAxisCoordinate(newX, newY);\n  }\n\n  /**\n   * Ensures the y value of an x axis draggable is zero and visa versa.\n   * @param {number} newX New position for the x value.\n   * @param {number} newY New position for the y value.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getAxisCoordinate(newX, newY) {\n    // Drag horizontal only.\n    if (this.pointer.isXAxis()) {\n      return new Coordinate(newX, 0);\n    }\n\n    // Drag vertical only.\n    if (this.pointer.isYAxis()) {\n      return new Coordinate(0, newY);\n    }\n\n    // Drag both directions.\n    return new Coordinate(newX, newY);\n  }\n\n  /**\n   * Returns a new coordinate with limits applied to it.\n   * @param {Coordinate} deltaFromStart The distance moved since the drag started.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getNewLimitedPosition(deltaFromStart) {\n    const sum = Coordinate.sum(this._relativeZero, deltaFromStart);\n    return new Coordinate(this._limitX(sum.x), this._limitY(sum.y));\n  }\n\n  /**\n   * Drag start handler.\n   * @private\n   */\n  _handleDragStart(evt) {\n    this._stopThrow();\n    this._saveDimensions();\n    this._currentPosition = this._relativeZero;\n    this._emitEvent(this._createEvent(Draggable.EventType.START, evt));\n    this.element.classList.add(Draggable.Classes.GRABBING);\n  }\n\n  /**\n   * Drag move, after _applyPosition has happened\n   * @param {PointerEvent} evt The dragger event.\n   * @private\n   */\n  _handleDragMove(evt) {\n    // Calculate the new position based on limits and the starting point.\n    this._currentPosition = this._getNewLimitedPosition(this.pointer.delta);\n\n    this._emitEvent(this._createEvent(Draggable.EventType.MOVE, evt));\n\n    if (!this.pointer._isDeactivated) {\n      this._applyPosition();\n    }\n  }\n\n  /**\n   * Dragging ended.\n   * @private\n   */\n  _handleDragEnd(evt) {\n    this._emitEvent(this._createEvent(Draggable.EventType.END, evt));\n    this.element.classList.remove(Draggable.Classes.GRABBING);\n\n    if (this.options.isThrowable && this.pointer.hasVelocity(evt.currentVelocity, 0)) {\n      this._throw(evt.currentVelocity, evt.delta);\n    }\n  }\n\n  /**\n   * Start a throw based on the draggable's velocity.\n   * @param {Coordinate} velocity Velocity.\n   * @param {Coordinate} delta Total drag distance from start to end.\n   * @private\n   */\n  _throw(velocity, delta) {\n    this._delta = delta;\n    this._throwVelocity = Coordinate.scale(velocity, this.options.amplifier);\n    this._animateThrow();\n  }\n\n  /**\n   * Scale down the velocity, update the position, and apply it. Then do it again\n   * until it's below a threshold.\n   * @private\n   */\n  _animateThrow() {\n    if (this.pointer.hasVelocity(this._throwVelocity, this.options.velocityStop)) {\n      this._currentPosition = this._getNewLimitedPosition(this._delta);\n      this._applyPosition();\n\n      this._delta.translate(this._throwVelocity);\n      this._throwVelocity.scale(this.options.throwFriction);\n\n      // Again!\n      this._requestId = requestAnimationFrame(this._animateThrow.bind(this));\n    } else {\n      // Settle on the pixel grid.\n      this._currentPosition.x = Math.round(this._currentPosition.x);\n      this._currentPosition.y = Math.round(this._currentPosition.y);\n      this._applyPosition();\n      this._emitSettled();\n    }\n  }\n\n  /**\n   * Interrupt a throw.\n   * @private\n   */\n  _stopThrow() {\n    this._delta = new Coordinate();\n    this._throwVelocity = new Coordinate();\n    cancelAnimationFrame(this._requestId);\n  }\n\n  /**\n   * Dispatches the SETTLE event with data. This data is different from the start,\n   * move, and end events which use data from the pointer.\n   * @private\n   */\n  _emitSettled() {\n    this._emitEvent(new OdoPointer.Event({\n      type: Draggable.EventType.SETTLE,\n      target: this.element,\n      axis: this.pointer.options.axis,\n      deltaTime: Date.now() - this.pointer.startTime,\n      delta: Coordinate.difference(this._relativeZero, this._currentPosition),\n      start: this._relativeZero,\n      end: this._currentPosition,\n      currentVelocity: this._throwVelocity,\n      position: {\n        pixel: this.getPosition(),\n        percent: this.getPosition(true),\n      },\n    }));\n  }\n\n  /**\n   * Make a new event with data.\n   * @param {Draggable.EventType} type Event type.\n   * @param {Event} evt Native event object.\n   * @return {!OdoPointer.Event}\n   * @private\n   */\n  _createEvent(type, evt) {\n    return new OdoPointer.Event({\n      type,\n      target: evt.target,\n      currentTarget: this.element,\n      axis: this.pointer.options.axis,\n      deltaTime: this.pointer.deltaTime,\n      delta: Coordinate.difference(this._currentPosition, this._relativeZero),\n      start: this._relativeZero,\n      end: this._currentPosition,\n      currentVelocity: this.pointer.velocity,\n      position: {\n        pixel: this.getPosition(),\n        percent: this.getPosition(true),\n      },\n    });\n  }\n\n  /**\n   * Sets the position of thd draggable element.\n   * @param {Coordinate} [position] Position to set the draggable element. This\n   *     will optionally override calculating the position from a drag.\n   * @return {Coordinate} The position the draggable element was set to.\n   */\n  _applyPosition(position) {\n    const pos = this._getElementPosition(position);\n    this.element.style[OdoDevice.Dom.TRANSFORM] = `translate(${pos.x}%,${pos.y}%)`;\n    return this._currentPosition;\n  }\n\n  /**\n   * Returns the current position of the draggable element.\n   * @param {boolean} [asPercent] Optionally retrieve percentage values instead\n   *     of pixel values.\n   * @return {Coordinate} X and Y coordinates of the draggable element.\n   */\n  getPosition(asPercent) {\n    if (asPercent) {\n      return new Coordinate(\n        (this._currentPosition.x / this._parentEl.offsetWidth) * 100,\n        (this._currentPosition.y / this._parentEl.offsetHeight) * 100,\n      );\n    }\n    return this._currentPosition;\n  }\n\n  /**\n   * Set the position of the draggable element.\n   * @param {number} x X position as a percentage. Eg. 50 for \"50%\".\n   * @param {number} y Y position as a percentage. Eg. 50 for \"50%\".\n   * @return {Coordinate} The position the draggable element was set to.\n   */\n  setPosition(x, y) {\n    // setPosition can be called before any dragging, this would cause\n    // the containment width and containment height to be undefined.\n    this.update();\n    return this._applyPosition(new Coordinate(x, y));\n  }\n\n  /**\n   * Sets (or reset) the Drag limits after a Dragger is created.\n   * @param {Rect} limits Object containing left, top, width,\n   *     height for new Dragger limits.\n   */\n  setLimits(limits) {\n    this.limits = limits;\n  }\n\n  get friction() {\n    return this.pointer.friction;\n  }\n\n  /**\n   * Set the friction value.\n   * @param {number} friction A number between [1, 0].\n   */\n  set friction(friction) {\n    this.pointer.friction = friction;\n  }\n\n  /**\n   * Get whether dragger is enabled.\n   * @return {boolean} Whether dragger is enabled.\n   */\n  get isEnabled() {\n    return this.pointer.isEnabled;\n  }\n\n  /**\n   * Set whether dragger is enabled.\n   * @param {boolean} enabled Whether dragger is enabled.\n   */\n  set isEnabled(enabled) {\n    this.pointer.isEnabled = enabled;\n    this.element.classList.toggle(settings.Classes.GRABBABLE, enabled);\n  }\n\n  /**\n   * Easy way to trigger setting dimensions. Useful for doing things after this\n   * class has been initialized, but no dragging has occurred yet.\n   */\n  update() {\n    this._saveDimensions();\n  }\n\n  /**\n   * Remove event listeners and element references.\n   * @private\n   */\n  dispose() {\n    this.pointer.off(OdoPointer.EventType.START, this._onStart);\n    this.pointer.off(OdoPointer.EventType.MOVE, this._onMove);\n    this.pointer.off(OdoPointer.EventType.END, this._onEnd);\n\n    this.pointer.dispose();\n\n    this.element.classList.remove(Draggable.Classes.GRABBABLE);\n\n    this._parentEl = null;\n    this.element = null;\n  }\n\n  /**\n   * Emits a event on this instance.\n   * @param {PointerEvent} event Event object with data.\n   * @return {boolean} Whether preventDefault was called on the event.\n   */\n  _emitEvent(event) {\n    this.emit(event.type, event);\n    return event.defaultPrevented;\n  }\n}\n\nObject.assign(Draggable, settings);\n\nexport default Draggable;\n"],"names":["OdoPointer","Axis","X","assert","condition","message","Error","Draggable","element","options","_TinyEmitter","Object","assign","Defaults","_parentEl","parentNode","_currentPosition","Coordinate","_relativeZero","_throwVelocity","_delta","_requestId","_container","width","height","limits","Rect","NaN","pointer","_this","axis","classList","add","Classes","GRABBABLE","_listen","_onStart","this","_handleDragStart","bind","_onMove","_handleDragMove","_onEnd","_handleDragEnd","on","EventType","START","MOVE","END","_saveDimensions","obj","getSize","_getRelativeZero","difference","_getDraggablePosition","_getOffsetCorrection","elRect","getBoundingClientRect","left","top","containmentRect","paddings","getPaddingBox","margins","getMarginBox","offsetCorrectionX","offsetCorrectionY","_setCurrentPosition","position","applyFriction","x","_limitX","offsetWidth","y","_limitY","offsetHeight","_getAxisCoordinate","Math","round","_limitValue","value","rectPosition","rectSize","side","defaultsTo","Number","isNaN","dimension","max","Infinity","min","clamp","_getElementPosition","optPosition","newX","newY","isXAxis","isYAxis","_getNewLimitedPosition","deltaFromStart","sum","evt","_stopThrow","_emitEvent","_createEvent","GRABBING","delta","_isDeactivated","_applyPosition","remove","isThrowable","hasVelocity","currentVelocity","_throw","velocity","scale","amplifier","_animateThrow","velocityStop","translate","throwFriction","requestAnimationFrame","_emitSettled","Event","SETTLE","Date","now","startTime","getPosition","type","target","deltaTime","pos","style","OdoDevice","Dom","TRANSFORM","asPercent","setPosition","update","setLimits","dispose","off","event","emit","defaultPrevented","friction","isEnabled","enabled","toggle","settings","TinyEmitter"],"mappings":"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"}