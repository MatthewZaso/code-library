{"version":3,"file":"odo-draggable.js","sources":["../src/settings.js","../src/draggable.js"],"sourcesContent":["import OdoPointer from '@odopod/odo-pointer';\n\nexport default {\n  /** @enum {string} */\n  EventType: {\n    START: 'ododraggable:start',\n    MOVE: 'ododraggable:move',\n    END: 'ododraggable:end',\n    SETTLE: 'ododraggable:throwsettle',\n  },\n\n  Classes: {\n    GRABBABLE: 'grabbable',\n    GRABBING: 'grabbing',\n  },\n\n  Defaults: {\n    // Draggable axis.\n    axis: OdoPointer.Axis.X,\n\n    // Amplifies throw velocity by this value. Higher values make the throwable\n    // travel farther and faster.\n    amplifier: 24,\n\n    // Once the velocity has gone below this threshold, throwing stops.\n    velocityStop: 0.08,\n\n    // On each throw frame, the velocity is multiplied by this friction value.\n    // It must be less than 1. Higher values let the throwable slide farther and longer.\n    throwFriction: 0.94,\n\n    // Whether the draggable will keep its movement momentum after the user releases.\n    isThrowable: false,\n  },\n};\n","import TinyEmitter from 'tiny-emitter';\nimport OdoDevice from '@odopod/odo-device';\nimport OdoPointer from '@odopod/odo-pointer';\nimport {\n  clamp,\n  Coordinate,\n  defaultsTo,\n  getMarginBox,\n  getPaddingBox,\n  getSize,\n  Rect,\n} from '@odopod/odo-helpers';\nimport settings from './settings';\n\n/**\n * Throws an error if `condition` is falsy.\n * @param {boolean} condition The condition to test.\n * @param {string} message Error message.\n * @throws {Error} If condition is falsy.\n * @private\n */\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Ensure the containing element has a width and height.\n * @param {Object} obj Object to test.\n */\nfunction ensureObjectHasSize(obj) {\n  assert(obj.width > 0, 'containing element\\'s width is zero');\n  assert(obj.height > 0, 'containing element\\'s height is zero');\n}\n\nclass Draggable extends TinyEmitter {\n  constructor(element, options = {}) {\n    super();\n\n    /**\n     * The draggable element.\n     * @type {HTMLElement}\n     * @private\n     */\n    this.element = element;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Draggable.Defaults, options);\n\n    /**\n     * The element which contains the target.\n     * @type {HTMLElement}\n     * @private\n     */\n    this._parentEl = element.parentNode;\n\n    /**\n     * Current position of the handle/target.\n     * @type {Coordinate}\n     * @private\n     */\n    this._currentPosition = new Coordinate();\n\n    /**\n     * Starting location of the drag.\n     * @type {Coordinate}\n     * @private\n     */\n    this._relativeZero = new Coordinate();\n\n    /**\n     * Velocity at which the draggable was thrown. This value decays over time\n     * after a throw.\n     * @private\n     * @type {Coordinate}\n     */\n    this._throwVelocity = new Coordinate();\n\n    /**\n     * The change in position from the start of the drag.\n     * @private\n     * @type {Coordinate}\n     */\n    this._delta = new Coordinate();\n\n    /**\n     * Animation frame id.\n     * @private\n     * @type {number}\n     */\n    this._requestId = 0;\n\n    /**\n     * The size of the containing element. This element is used to determine\n     * the percentage position of the draggable element.\n     * @type {Object}\n     */\n    this._container = { width: 0, height: 0 };\n\n    /**\n     * Limits of how far the draggable element can be dragged.\n     * @type {Rect}\n     */\n    this.limits = new Rect(NaN, NaN, NaN, NaN);\n\n    this.pointer = new OdoPointer(element, {\n      axis: this.options.axis,\n    });\n\n    this.element.classList.add(Draggable.Classes.GRABBABLE);\n\n    // Kick off.\n    this._listen();\n  }\n\n  _listen() {\n    this._onStart = this._handleDragStart.bind(this);\n    this._onMove = this._handleDragMove.bind(this);\n    this._onEnd = this._handleDragEnd.bind(this);\n\n    this.pointer.on(OdoPointer.EventType.START, this._onStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onEnd);\n  }\n\n  /**\n   * Saves the containment element's width and height and scrubber position.\n   * @private\n   */\n  _saveDimensions() {\n    this._container = getSize(this.element);\n    ensureObjectHasSize(this._container);\n    this._relativeZero = this._getRelativeZero();\n  }\n\n  /**\n   * The position relative to the rest of the page. When it's first\n   * initialized, it is zero zero, but after dragging, it is the position\n   * relative to zero zero.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getRelativeZero() {\n    return Coordinate.difference(\n      this._getDraggablePosition(),\n      this._getOffsetCorrection(),\n    );\n  }\n\n  _getDraggablePosition() {\n    const elRect = this.element.getBoundingClientRect();\n    return new Coordinate(elRect.left, elRect.top);\n  }\n\n  /**\n   * Because the draggable element gets moved around and repositioned,\n   * the bounding client rect method and the offset left and top properties\n   * are unreliable once the element has been dragged once. This method uses\n   * the bounding client rect of the parent element to get a \"correction\"\n   * value.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getOffsetCorrection() {\n    // getBoundingClientRect does not include margins. They must be accounted for.\n    const containmentRect = this._parentEl.getBoundingClientRect();\n    const paddings = getPaddingBox(this._parentEl);\n    const margins = getMarginBox(this.element);\n    const offsetCorrectionX = margins.left + paddings.left + containmentRect.left;\n    const offsetCorrectionY = margins.top + paddings.top + containmentRect.top;\n    return new Coordinate(offsetCorrectionX, offsetCorrectionY);\n  }\n\n  /**\n   * Sets the current position coordinate to a new coordinate.\n   * @param {Coordinate} position Where the x and y values are a percentage.\n   *     e.g. 50 for \"50%\".\n   */\n  _setCurrentPosition(position) {\n    this.pointer.applyFriction(position);\n    const x = this._limitX((position.x / 100) * this._parentEl.offsetWidth);\n    const y = this._limitY((position.y / 100) * this._parentEl.offsetHeight);\n    this._currentPosition = this._getAxisCoordinate(Math.round(x), Math.round(y));\n  }\n\n  /**\n   * Clamp the x or y value.\n   * @param {number} value X or Y value.\n   * @param {number} rectPosition The limits starting edge. (left or top).\n   * @param {number} rectSize The limits dimension. (width or height).\n   * @return {number} The clamped number.\n   */\n  static _limitValue(value, rectPosition, rectSize) {\n    const side = defaultsTo(rectPosition, null, !Number.isNaN(rectPosition));\n    const dimension = defaultsTo(rectSize, 0, !Number.isNaN(rectSize));\n    const max = defaultsTo(side + dimension, Infinity, side !== null);\n    const min = defaultsTo(side, -Infinity, side !== null);\n    return clamp(value, min, max);\n  }\n\n  /**\n   * Returns the 'real' x after limits are applied (allows for some\n   * limits to be undefined).\n   * @param {number} x X-coordinate to limit.\n   * @return {number} The 'real' X-coordinate after limits are applied.\n   */\n  _limitX(x) {\n    return Draggable._limitValue(x, this.limits.left, this.limits.width);\n  }\n\n  /**\n   * Returns the 'real' y after limits are applied (allows for some\n   * limits to be undefined).\n   * @param {number} y Y-coordinate to limit.\n   * @return {number} The 'real' Y-coordinate after limits are applied.\n   */\n  _limitY(y) {\n    return Draggable._limitValue(y, this.limits.top, this.limits.height);\n  }\n\n  /**\n   * Returns the x and y positions the draggable element should be set to.\n   * @param {Coordinate=} optPosition Position to set the draggable\n   *     element. This will optionally override calculating the position\n   *     from a drag.\n   * @return {!Coordinate} The x and y coordinates.\n   * @private\n   */\n  _getElementPosition(optPosition) {\n    if (optPosition) {\n      this._setCurrentPosition(optPosition);\n    }\n\n    const newX = (this._currentPosition.x / this._container.width) * 100;\n    const newY = (this._currentPosition.y / this._container.height) * 100;\n\n    return this._getAxisCoordinate(newX, newY);\n  }\n\n  /**\n   * Ensures the y value of an x axis draggable is zero and visa versa.\n   * @param {number} newX New position for the x value.\n   * @param {number} newY New position for the y value.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getAxisCoordinate(newX, newY) {\n    // Drag horizontal only.\n    if (this.pointer.isXAxis()) {\n      return new Coordinate(newX, 0);\n    }\n\n    // Drag vertical only.\n    if (this.pointer.isYAxis()) {\n      return new Coordinate(0, newY);\n    }\n\n    // Drag both directions.\n    return new Coordinate(newX, newY);\n  }\n\n  /**\n   * Returns a new coordinate with limits applied to it.\n   * @param {Coordinate} deltaFromStart The distance moved since the drag started.\n   * @return {!Coordinate}\n   * @private\n   */\n  _getNewLimitedPosition(deltaFromStart) {\n    const sum = Coordinate.sum(this._relativeZero, deltaFromStart);\n    return new Coordinate(this._limitX(sum.x), this._limitY(sum.y));\n  }\n\n  /**\n   * Drag start handler.\n   * @private\n   */\n  _handleDragStart(evt) {\n    this._stopThrow();\n    this._saveDimensions();\n    this._currentPosition = this._relativeZero;\n    this._emitEvent(this._createEvent(Draggable.EventType.START, evt));\n    this.element.classList.add(Draggable.Classes.GRABBING);\n  }\n\n  /**\n   * Drag move, after _applyPosition has happened\n   * @param {PointerEvent} evt The dragger event.\n   * @private\n   */\n  _handleDragMove(evt) {\n    // Calculate the new position based on limits and the starting point.\n    this._currentPosition = this._getNewLimitedPosition(this.pointer.delta);\n\n    this._emitEvent(this._createEvent(Draggable.EventType.MOVE, evt));\n\n    if (!this.pointer._isDeactivated) {\n      this._applyPosition();\n    }\n  }\n\n  /**\n   * Dragging ended.\n   * @private\n   */\n  _handleDragEnd(evt) {\n    this._emitEvent(this._createEvent(Draggable.EventType.END, evt));\n    this.element.classList.remove(Draggable.Classes.GRABBING);\n\n    if (this.options.isThrowable && this.pointer.hasVelocity(evt.currentVelocity, 0)) {\n      this._throw(evt.currentVelocity, evt.delta);\n    }\n  }\n\n  /**\n   * Start a throw based on the draggable's velocity.\n   * @param {Coordinate} velocity Velocity.\n   * @param {Coordinate} delta Total drag distance from start to end.\n   * @private\n   */\n  _throw(velocity, delta) {\n    this._delta = delta;\n    this._throwVelocity = Coordinate.scale(velocity, this.options.amplifier);\n    this._animateThrow();\n  }\n\n  /**\n   * Scale down the velocity, update the position, and apply it. Then do it again\n   * until it's below a threshold.\n   * @private\n   */\n  _animateThrow() {\n    if (this.pointer.hasVelocity(this._throwVelocity, this.options.velocityStop)) {\n      this._currentPosition = this._getNewLimitedPosition(this._delta);\n      this._applyPosition();\n\n      this._delta.translate(this._throwVelocity);\n      this._throwVelocity.scale(this.options.throwFriction);\n\n      // Again!\n      this._requestId = requestAnimationFrame(this._animateThrow.bind(this));\n    } else {\n      // Settle on the pixel grid.\n      this._currentPosition.x = Math.round(this._currentPosition.x);\n      this._currentPosition.y = Math.round(this._currentPosition.y);\n      this._applyPosition();\n      this._emitSettled();\n    }\n  }\n\n  /**\n   * Interrupt a throw.\n   * @private\n   */\n  _stopThrow() {\n    this._delta = new Coordinate();\n    this._throwVelocity = new Coordinate();\n    cancelAnimationFrame(this._requestId);\n  }\n\n  /**\n   * Dispatches the SETTLE event with data. This data is different from the start,\n   * move, and end events which use data from the pointer.\n   * @private\n   */\n  _emitSettled() {\n    this._emitEvent(new OdoPointer.Event({\n      type: Draggable.EventType.SETTLE,\n      target: this.element,\n      axis: this.pointer.options.axis,\n      deltaTime: Date.now() - this.pointer.startTime,\n      delta: Coordinate.difference(this._relativeZero, this._currentPosition),\n      start: this._relativeZero,\n      end: this._currentPosition,\n      currentVelocity: this._throwVelocity,\n      position: {\n        pixel: this.getPosition(),\n        percent: this.getPosition(true),\n      },\n    }));\n  }\n\n  /**\n   * Make a new event with data.\n   * @param {Draggable.EventType} type Event type.\n   * @param {Event} evt Native event object.\n   * @return {!OdoPointer.Event}\n   * @private\n   */\n  _createEvent(type, evt) {\n    return new OdoPointer.Event({\n      type,\n      target: evt.target,\n      currentTarget: this.element,\n      axis: this.pointer.options.axis,\n      deltaTime: this.pointer.deltaTime,\n      delta: Coordinate.difference(this._currentPosition, this._relativeZero),\n      start: this._relativeZero,\n      end: this._currentPosition,\n      currentVelocity: this.pointer.velocity,\n      position: {\n        pixel: this.getPosition(),\n        percent: this.getPosition(true),\n      },\n    });\n  }\n\n  /**\n   * Sets the position of thd draggable element.\n   * @param {Coordinate} [position] Position to set the draggable element. This\n   *     will optionally override calculating the position from a drag.\n   * @return {Coordinate} The position the draggable element was set to.\n   */\n  _applyPosition(position) {\n    const pos = this._getElementPosition(position);\n    this.element.style[OdoDevice.Dom.TRANSFORM] = `translate(${pos.x}%,${pos.y}%)`;\n    return this._currentPosition;\n  }\n\n  /**\n   * Returns the current position of the draggable element.\n   * @param {boolean} [asPercent] Optionally retrieve percentage values instead\n   *     of pixel values.\n   * @return {Coordinate} X and Y coordinates of the draggable element.\n   */\n  getPosition(asPercent) {\n    if (asPercent) {\n      return new Coordinate(\n        (this._currentPosition.x / this._parentEl.offsetWidth) * 100,\n        (this._currentPosition.y / this._parentEl.offsetHeight) * 100,\n      );\n    }\n    return this._currentPosition;\n  }\n\n  /**\n   * Set the position of the draggable element.\n   * @param {number} x X position as a percentage. Eg. 50 for \"50%\".\n   * @param {number} y Y position as a percentage. Eg. 50 for \"50%\".\n   * @return {Coordinate} The position the draggable element was set to.\n   */\n  setPosition(x, y) {\n    // setPosition can be called before any dragging, this would cause\n    // the containment width and containment height to be undefined.\n    this.update();\n    return this._applyPosition(new Coordinate(x, y));\n  }\n\n  /**\n   * Sets (or reset) the Drag limits after a Dragger is created.\n   * @param {Rect} limits Object containing left, top, width,\n   *     height for new Dragger limits.\n   */\n  setLimits(limits) {\n    this.limits = limits;\n  }\n\n  get friction() {\n    return this.pointer.friction;\n  }\n\n  /**\n   * Set the friction value.\n   * @param {number} friction A number between [1, 0].\n   */\n  set friction(friction) {\n    this.pointer.friction = friction;\n  }\n\n  /**\n   * Get whether dragger is enabled.\n   * @return {boolean} Whether dragger is enabled.\n   */\n  get isEnabled() {\n    return this.pointer.isEnabled;\n  }\n\n  /**\n   * Set whether dragger is enabled.\n   * @param {boolean} enabled Whether dragger is enabled.\n   */\n  set isEnabled(enabled) {\n    this.pointer.isEnabled = enabled;\n    this.element.classList.toggle(settings.Classes.GRABBABLE, enabled);\n  }\n\n  /**\n   * Easy way to trigger setting dimensions. Useful for doing things after this\n   * class has been initialized, but no dragging has occurred yet.\n   */\n  update() {\n    this._saveDimensions();\n  }\n\n  /**\n   * Remove event listeners and element references.\n   * @private\n   */\n  dispose() {\n    this.pointer.off(OdoPointer.EventType.START, this._onStart);\n    this.pointer.off(OdoPointer.EventType.MOVE, this._onMove);\n    this.pointer.off(OdoPointer.EventType.END, this._onEnd);\n\n    this.pointer.dispose();\n\n    this.element.classList.remove(Draggable.Classes.GRABBABLE);\n\n    this._parentEl = null;\n    this.element = null;\n  }\n\n  /**\n   * Emits a event on this instance.\n   * @param {PointerEvent} event Event object with data.\n   * @return {boolean} Whether preventDefault was called on the event.\n   */\n  _emitEvent(event) {\n    this.emit(event.type, event);\n    return event.defaultPrevented;\n  }\n}\n\nObject.assign(Draggable, settings);\n\nexport default Draggable;\n"],"names":["EventType","START","MOVE","END","SETTLE","Classes","GRABBABLE","GRABBING","Defaults","axis","OdoPointer","Axis","X","amplifier","velocityStop","throwFriction","isThrowable","assert","condition","message","Error","ensureObjectHasSize","obj","width","height","Draggable","element","options","Object","assign","_parentEl","parentNode","_currentPosition","Coordinate","_relativeZero","_throwVelocity","_delta","_requestId","_container","limits","Rect","NaN","pointer","classList","add","_listen","_onStart","_handleDragStart","bind","_onMove","_handleDragMove","_onEnd","_handleDragEnd","on","_saveDimensions","getSize","_getRelativeZero","difference","_getDraggablePosition","_getOffsetCorrection","elRect","getBoundingClientRect","left","top","containmentRect","paddings","getPaddingBox","margins","getMarginBox","offsetCorrectionX","offsetCorrectionY","_setCurrentPosition","position","applyFriction","x","_limitX","offsetWidth","y","_limitY","offsetHeight","_getAxisCoordinate","Math","round","_limitValue","value","rectPosition","rectSize","side","defaultsTo","Number","isNaN","dimension","max","Infinity","min","clamp","_getElementPosition","optPosition","newX","newY","isXAxis","isYAxis","_getNewLimitedPosition","deltaFromStart","sum","evt","_stopThrow","_emitEvent","_createEvent","delta","_isDeactivated","_applyPosition","remove","hasVelocity","currentVelocity","_throw","velocity","scale","_animateThrow","translate","requestAnimationFrame","_emitSettled","cancelAnimationFrame","Event","type","target","deltaTime","Date","now","startTime","start","end","pixel","getPosition","percent","currentTarget","pos","style","OdoDevice","Dom","TRANSFORM","asPercent","setPosition","update","setLimits","dispose","off","event","emit","defaultPrevented","friction","isEnabled","enabled","toggle","settings","TinyEmitter"],"mappings":"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"}