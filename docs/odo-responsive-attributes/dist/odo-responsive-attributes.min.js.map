{"version":3,"file":"odo-responsive-attributes.min.js","sources":["../src/responsive-attributes.js"],"sourcesContent":["/**\n * @fileoverview Parse data attributes with respect to their breakpoints.\n *\n * @author Glen Cheney <glen@odopod.com>\n */\n\nimport OdoBaseComponent from '@odopod/odo-base-component';\n\nclass ResponsiveAttributes {\n\n  /**\n   * Create a new instance of the attribute parser.\n   * @param {Element} element Element to read attributes from.\n   * @param {string} [attributeName] Name of the data attribute.\n   * @constructor\n   */\n  constructor(element, attributeName = 'responsive') {\n    this.element = element;\n    this.attr = attributeName;\n    this.values = this.parse();\n    this.update();\n  }\n\n  /**\n   * Update the current value for this breakpoint.\n   * @return {ResponsiveAttributes} The instance for chaining.\n   */\n  update() {\n    this.currentValue = this.getCurrentBreakpointValue(this.values);\n    return this;\n  }\n\n  /**\n   * Parse the repsonsive attributes.\n   * @return {{xs: ?string, sm: ?string, md: ?string, lg: ?string}} An object\n   *     containing values for each breakpoint, each of which could be null.\n   */\n  parse() {\n    const obj = {};\n    let lastValue = null;\n    const defaultValue = this._getAttribute('', '');\n\n    OdoBaseComponent.BREAKPOINT_NAMES.forEach((name) => {\n      obj[name] = this._getAttributeValue(name, defaultValue || lastValue);\n      lastValue = obj[name];\n    });\n\n    return obj;\n  }\n\n  /**\n   * Retrieve the attribute's value. If that value doesn't exist, return the\n   * default value.\n   * @param {string} name Breakpoint name (xs, sm, md, lg).\n   * @param {?string} defaultValue Default value for the attribute.\n   * @return {?string}\n   */\n  _getAttributeValue(name, defaultValue) {\n    return this._getAttribute(name) || defaultValue;\n  }\n\n  /**\n   * Read a responsive attribute.\n   * @param {string} name Breakpoint name (xs, sm, md, lg).\n   * @param {string} [delimiter] Responsive suffix delimiter.\n   * @return {?string} The attribute or null if it doesn't exist.\n   */\n  _getAttribute(name, delimiter = ResponsiveAttributes.BREAKPOINT_DELIMITER) {\n    return this.element.getAttribute(`data-${this.attr}${delimiter}${name}`);\n  }\n\n  /**\n   * Determine the current value in an object by its breakpoint key.\n   * @param {{xs, sm, md, lg}} values An object with breakpoint keys.\n   * @return {?string}\n   */\n  getCurrentBreakpointValue(values) {\n    return values[OdoBaseComponent.getCurrentBreakpoint()];\n  }\n\n  /**\n   * Cleanup method.\n   */\n  dispose() {\n    this.element = null;\n  }\n}\n\nResponsiveAttributes.BREAKPOINT_DELIMITER = '.';\n\nexport default ResponsiveAttributes;\n"],"names":["ResponsiveAttributes","element","attributeName","attr","values","this","parse","update","currentValue","getCurrentBreakpointValue","obj","lastValue","defaultValue","_getAttribute","BREAKPOINT_NAMES","forEach","name","_this","_getAttributeValue","delimiter","BREAKPOINT_DELIMITER","getAttribute","OdoBaseComponent","getCurrentBreakpoint","dispose"],"mappings":"0aAQMA,wBAQQC,OAASC,yDAAgB,4BAC9BD,QAAUA,OACVE,KAAOD,OACPE,OAASC,KAAKC,aACdC,4BAOPA,8BACOC,aAAeH,KAAKI,0BAA0BJ,KAAKD,QACjDC,kBAQTC,4BACQI,KACFC,EAAY,KACVC,EAAeP,KAAKQ,cAAc,GAAI,aAE3BC,iBAAiBC,QAAQ,SAACC,KACrCA,GAAQC,EAAKC,mBAAmBF,EAAMJ,GAAgBD,KAC9CD,EAAIM,KAGXN,eAUTQ,4BAAmBF,EAAMJ,UAChBP,KAAKQ,cAAcG,IAASJ,eASrCC,uBAAcG,OAAMG,yDAAYnB,EAAqBoB,4BAC5Cf,KAAKJ,QAAQoB,qBAAqBhB,KAAKF,KAAOgB,EAAYH,gBAQnEP,mCAA0BL,UACjBA,EAAOkB,EAAiBC,qCAMjCC,wBACOvB,QAAU,kBAInBD,EAAqBoB,qBAAuB"}