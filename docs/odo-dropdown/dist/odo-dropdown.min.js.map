{"version":3,"file":"odo-dropdown.min.js","sources":["../src/dropdown.js"],"sourcesContent":["import OdoDevice from '@odopod/odo-device';\nimport { animation, dom, style } from '@odopod/odo-helpers';\nimport OdoBaseComponent from '@odopod/odo-base-component';\n\nlet id = 0;\nfunction uniqueId() {\n  id += 1;\n  return 'ododropdown-' + id;\n}\n\nclass Dropdown extends OdoBaseComponent {\n  constructor(element, options = {}) {\n    super(element);\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Dropdown.Defaults, options);\n\n    /**\n     * Unique id for this instance.\n     * @type {string}\n     */\n    this.id = uniqueId();\n\n    /**\n     * Whether the dropdown is currently open.\n     * @type {boolean}\n     */\n    this._isOpen = false;\n\n    /**\n     * The <select> element.\n     * @type {HTMLSelectElement}\n     */\n    this._select = this.getElementByClass(Dropdown.Classes.SELECT);\n\n    // Give the select an id if it doesn't have one.\n    dom.giveId(this._select, this.id);\n\n    /**\n     * The <label> for the <select>.\n     * @type {?HTMLLabelElement}\n     */\n    this._label = document.querySelector(`label[for=\"${this._select.id}\"]`);\n\n    // Generate the custom markup for options.\n    if (this.options.insertMarkup) {\n      this._insertMarkup();\n    }\n\n    // Save Element references.\n    this._optionsContainer = this.getElementByClass(Dropdown.Classes.OPTIONS_CONTAINER);\n    this._button = this.getElementByClass(Dropdown.Classes.BUTTON);\n    this._placeholder = this.getElementByClass(Dropdown.Classes.DEFAULT);\n    this._valueContainer = this.getElementByClass(Dropdown.Classes.VALUE);\n\n    // Set the selected option.\n    this._selectedOption = this._getCustomSelectedOption();\n\n    this._onSelectChange = this._handleSelectChange.bind(this);\n    this._onPageClick = this._handlePageClick.bind(this);\n    this._onButtonClick = this._showOptions.bind(this);\n    this._onKey = this._handleKey.bind(this);\n\n    this._transitionId = null;\n\n    this._initialize();\n  }\n\n  /**\n   * Determines whether to create custom dropdown module,\n   * or use native select element\n   */\n  _initialize() {\n    this._valueContainer.setAttribute('aria-hidden', true);\n\n    if (this.options.useNative) {\n      this._initializeNativeDropdown();\n    } else {\n      this._initializeCustomDropdown();\n    }\n  }\n\n  /**\n   * Return the selected custom option element.\n   * @return {Element}\n   */\n  _getCustomSelectedOption() {\n    return this.getCustomOptions()[this._select.selectedIndex];\n  }\n\n  /**\n   * Insert the custom option html markup before the <select> element.\n   */\n  _insertMarkup() {\n    const markup = this.getCustomOptionsHtml();\n    this._select.insertAdjacentHTML('beforebegin', markup);\n  }\n\n  /**\n   * Listen for change events on the <select>.\n   */\n  _initializeNativeDropdown() {\n    this.element.classList.add(Dropdown.Classes.BASE_NATIVE);\n    this._select.addEventListener('change', this._onSelectChange);\n\n    // Hide the <button> from the screen reader so that it only reads the\n    // <select> element. The <select> is actually positioned on top of the\n    // <button> with zero opacity.\n    this._button.setAttribute('aria-hidden', true);\n    this._button.tabIndex = -1;\n  }\n\n  /**\n   * Listen for clicks to trigger the menu and keyboard input.\n   */\n  _initializeCustomDropdown() {\n    if (this._label) {\n      dom.giveId(this._label, this.id + '-label');\n      const { id } = this._label;\n      this._optionsContainer.setAttribute('aria-labelledby', id);\n    }\n\n    this._select.tabIndex = -1;\n    this._select.setAttribute('aria-hidden', true);\n    this._button.setAttribute('aria-haspopup', 'true');\n    this._button.setAttribute('aria-controls', this._select.id);\n    this._button.setAttribute('aria-expanded', false);\n\n    this._toggleButtonListener(true);\n    this.element.addEventListener('keydown', this._onKey);\n  }\n\n  /**\n   * Key down event occured.\n   * @param {KeyboardEvent} e Event object.\n   */\n  _handleKey(e) {\n    const code = e.which;\n\n    if (this._isOpen) {\n      switch (code) {\n        case Dropdown.Key.ESC:\n        case Dropdown.Key.TAB:\n          this._hideOptions();\n          break;\n\n        case Dropdown.Key.DOWN:\n        case Dropdown.Key.UP:\n          e.preventDefault();\n          Dropdown._moveFocus(code === Dropdown.Key.DOWN);\n          break;\n\n        case Dropdown.Key.SPACE:\n        case Dropdown.Key.ENTER:\n          e.preventDefault();\n          this._selectOption(e.target);\n          break;\n        // no default\n      }\n    } else {\n      switch (code) {\n        case Dropdown.Key.SPACE:\n        case Dropdown.Key.DOWN:\n        case Dropdown.Key.UP:\n        case Dropdown.Key.ENTER:\n          e.preventDefault();\n          this._showOptions();\n          break;\n        // no default\n      }\n    }\n  }\n\n  /**\n   * Transer focus from one option to the next or prev enabled option.\n   * @param {boolean} isNext Whether to focus on the next or previous option.\n   */\n  static _moveFocus(isNext) {\n    const selector = Dropdown.Selector.ENABLED_OPTION;\n    const enabledOption = isNext ?\n      Dropdown._nextMatch(document.activeElement, selector) :\n      Dropdown._prevMatch(document.activeElement, selector);\n\n    if (enabledOption) {\n      enabledOption.focus();\n    }\n  }\n\n  /**\n   * Find the next sibling which matches a selector.\n   * @param {Element} element Element to test.\n   * @param {string} selector Selector to match.\n   * @return {?Element} The element or null if there isn't one.\n   */\n  static _nextMatch(element, selector) {\n    while ((element = element.nextElementSibling)) { // eslint-disable-line\n      if (element.matches(selector)) {\n        return element;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Find the previous sibling which matches a selector.\n   * @param {Element} element Element to test.\n   * @param {string} selector Selector to match.\n   * @return {?Element} The element or null if there isn't one.\n   */\n  static _prevMatch(element, selector) {\n    while ((element = element.previousElementSibling)) { // eslint-disable-line\n      if (element.matches(selector)) {\n        return element;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Delegated click event on the document. Check to see if it was an option,\n   * otherwise hide the dropdown menu.\n   * @param {MouseEvent} e Event object.\n   */\n  _handlePageClick(e) {\n    const option = e.target.closest('.' + Dropdown.Classes.OPTION);\n    if (option) {\n      this._selectOption(option);\n    } else {\n      this._hideOptions();\n    }\n  }\n\n  /**\n   * Set the current value from an option element.\n   * @param {Element} option Custom option element.\n   */\n  _selectOption(option) {\n    // Avoid selecting disabled options or a target which is not an option (if\n    // the user rapidly presses space|enter, this method could be called with\n    // an event target which is not an option element because the transition\n    // hasn't finished).\n    if (option.classList.contains(Dropdown.Classes.OPTION_DISABLED) ||\n        !option.classList.contains(Dropdown.Classes.OPTION)) {\n      return;\n    }\n\n    const value = option.getAttribute('data-value');\n    this.value = value;\n    this._hideOptions();\n\n    // Emit event to notify watchers that this has changed.\n    this.emit(Dropdown.EventType.CHANGE, {\n      name: this.select.name,\n      value: this.value,\n    });\n  }\n\n  /**\n   * The native <select> input changed. Update the display.\n   */\n  _handleSelectChange() {\n    this.value = this._select.value;\n\n    // Emit event to notify watchers that this has changed.\n    this.emit(Dropdown.EventType.CHANGE, {\n      name: this.select.name,\n      value: this.value,\n    });\n  }\n\n  /**\n   * Add or remove click listener for custom select display element\n   * @params {boolean} add Whether to add or remove click listener\n   */\n  _toggleButtonListener(add) {\n    if (add) {\n      this._button.addEventListener('click', this._onButtonClick);\n    } else {\n      this._button.removeEventListener('click', this._onButtonClick);\n    }\n  }\n\n  /**\n   * Show the options dropdown menu.\n   */\n  _showOptions() {\n    this._isOpen = true;\n\n    // Clear any pending transition ends.\n    animation.cancelTransitionEnd(this._transitionId);\n\n    // Remove click listener on button.\n    this._toggleButtonListener(false);\n\n    this.element.classList.add(Dropdown.Classes.OPEN);\n    this._optionsContainer.setAttribute('aria-hidden', false);\n    this._button.setAttribute('aria-expanded', true);\n    this._button.tabIndex = -1;\n    style.causeLayout(this._optionsContainer);\n    this._optionsContainer.classList.add(Dropdown.Classes.OPTIONS_CONTAINER_OPEN);\n    this._transitionId = animation.onTransitionEnd(\n      this._optionsContainer,\n      this._handleOptionsShown, this,\n    );\n  }\n\n  /**\n   * Options dropdown finished show animation.\n   */\n  _handleOptionsShown() {\n    document.body.addEventListener('click', this._onPageClick);\n\n    // If all the options are disabled, a selected option doesn't exist.\n    if (this._selectedOption) {\n      this._selectedOption.focus();\n    }\n  }\n\n  /**\n   * Hide the options dropdown.\n   */\n  _hideOptions() {\n    this._isOpen = false;\n\n    // Clear any pending transition ends.\n    animation.cancelTransitionEnd(this._transitionId);\n\n    document.body.removeEventListener('click', this._onPageClick);\n    this._optionsContainer.setAttribute('aria-hidden', true);\n    this._button.tabIndex = 0;\n    this._button.setAttribute('aria-expanded', false);\n    this._optionsContainer.classList.remove(Dropdown.Classes.OPTIONS_CONTAINER_OPEN);\n    this._transitionId = animation.onTransitionEnd(\n      this._optionsContainer,\n      this._handleOptionsHidden, this,\n    );\n  }\n\n  /**\n   * Options dropdown finished hiding.\n   */\n  _handleOptionsHidden() {\n    this.element.classList.remove(Dropdown.Classes.OPEN);\n    this._button.focus();\n    this._toggleButtonListener(true);\n  }\n\n  /**\n   * Generate the HTML to show on non-touch devices.\n   * @return {string} A string of HTML.\n   * @protected\n   */\n  getCustomOptionsHtml() {\n    return `<div class=\"${Dropdown.Classes.OPTIONS_CONTAINER}\" role=\"menu\" aria-hidden=\"true\">` +\n      this.getOptionsMarkup() +\n      '</div>';\n  }\n\n  /**\n   * Generate an HTML string for custom options based on the current options\n   * in the <select>\n   * @return {string} Markup.\n   * @protected\n   */\n  getOptionsMarkup() {\n    return this.getNativeOptions().reduce((str, option) => str + this.getOptionMarkup(option), '');\n  }\n\n  /**\n   * Create an HTML string to be used for a custom option.\n   * @param {HTMLOptionElement} option Native option element.\n   * @return {string} Markup.\n   * @protected\n   */\n  getOptionMarkup(option) {\n    const selected = option.selected ? ' ' + Dropdown.Classes.OPTION_SELECTED : '';\n    const disabled = option.disabled ? ' ' + Dropdown.Classes.OPTION_DISABLED : '';\n    const className = Dropdown.Classes.OPTION + selected + disabled;\n    return `<div class=\"${className}\" data-value=\"${option.value}\" tabindex=\"-1\" role=\"menuitem\">` +\n      option.text + '</div>';\n  }\n\n  /**\n   * Return an array of custom option elements.\n   * @return {Array.<HTMLDivElement>}\n   */\n  getCustomOptions() {\n    return this.getElementsByClass(Dropdown.Classes.OPTION);\n  }\n\n  /**\n   * Return an array of option elements.\n   * @return {Array.<HTMLOptionElement>}\n   */\n  getNativeOptions() {\n    return Array.from(this.select.options);\n  }\n\n  /**\n   * Retrieve the text to display inside the button.\n   * @param {number} selectedIndex Index of the selected option.\n   * @return {string} Text to display.\n   * @protected\n   */\n  getDisplayText(selectedIndex) {\n    return this.select.options[selectedIndex].text;\n  }\n\n  /**\n   * Retrieve the selected index of the <select>\n   * @return {number}\n   */\n  get selectedIndex() {\n    return this._select.selectedIndex;\n  }\n\n  /**\n   * Set the selected option by index.\n   * @param {number} index Index to select.\n   */\n  set selectedIndex(index) {\n    this.value = this._select.options[index].value;\n  }\n\n  /**\n   * Returns the <select>.\n   * @return {HTMLSelectElement}\n   */\n  get select() {\n    return this._select;\n  }\n\n  /**\n   * Returns the button to open the select menu.\n   * @return {HTMLButtonElement}\n   */\n  get button() {\n    return this._button;\n  }\n\n  /**\n   * Return the display text for the currently selected option.\n   * @returns {string}\n   */\n  get selectedText() {\n    return this._select.options[this._select.selectedIndex].text;\n  }\n\n  /**\n   * Retrieve the selected value.\n   * @return {string}\n   */\n  get value() {\n    return this._select.value;\n  }\n\n  /**\n   * Set the value of the <select> and the custom menu.\n   * @param {string} value Value which matches one of the options.\n   */\n  set value(value) {\n    // Remove the old selected class.\n    if (this._selectedOption) {\n      this._selectedOption.classList.remove(Dropdown.Classes.OPTION_SELECTED);\n    }\n\n    // Set new value.\n    this._select.value = value;\n\n    // Update currently selected option.\n    this._selectedOption = this._getCustomSelectedOption();\n\n    if (this._selectedOption) {\n      // Read the text for the new value.\n      const text = this.getDisplayText(this.selectedIndex);\n\n      this._selectedOption.classList.add(Dropdown.Classes.OPTION_SELECTED);\n\n      // Update display.\n      this._placeholder.style.display = 'none';\n      this._placeholder.setAttribute('aria-hidden', true);\n      this._valueContainer.textContent = text;\n      this._valueContainer.removeAttribute('aria-hidden');\n    } else {\n      this._placeholder.style.display = '';\n      this._placeholder.removeAttribute('aria-hidden');\n      this._valueContainer.textContent = '';\n      this._valueContainer.setAttribute('aria-hidden', true);\n    }\n  }\n\n  /**\n   * Get the disabled state of the component.\n   * @return {boolean}\n   */\n  get disabled() {\n    return this.select.disabled;\n  }\n\n  /**\n   * Set the disabled state of the component.\n   * @param {boolean} isDisabled Whether it's disabled or not.\n   */\n  set disabled(isDisabled) {\n    this.select.disabled = isDisabled;\n    this.button.disabled = isDisabled;\n  }\n\n  /**\n   * Toggle the state of an option.\n   * @param {string} value Value of the option to toggle.\n   * @param {boolean} isDisabled Whether to disable it or not.\n   * @return {Dropdown} This instance for chaining.\n   */\n  toggleOptionByValue(value, isDisabled) {\n    const customOption = this._optionsContainer.querySelector(`[data-value=\"${value}\"]`);\n    const nativeOption = this._select.querySelector(`[value=\"${value}\"]`);\n\n    customOption.classList.toggle(Dropdown.Classes.OPTION_DISABLED, isDisabled);\n    if (isDisabled) {\n      customOption.setAttribute('aria-disabled', true);\n    } else {\n      customOption.removeAttribute('aria-disabled');\n    }\n\n    nativeOption.disabled = isDisabled;\n\n    return this;\n  }\n\n  /**\n   * Disable an option.\n   * @param {string} value Value of the option to disable.\n   * @return {Dropdown} This instance.\n   */\n  disableOptionByValue(value) {\n    return this.toggleOptionByValue(value, true);\n  }\n\n  /**\n   * Enable an option.\n   * @param {string} value Value of the option to enable.\n   * @return {Dropdown} This instance.\n   */\n  enableOptionByValue(value) {\n    return this.toggleOptionByValue(value, false);\n  }\n\n  dispose() {\n    this._select.removeEventListener('change', this._onSelectChange);\n    this._button.removeEventListener('click', this._onButtonClick);\n    document.body.removeEventListener('click', this._onPageClick);\n    this._optionsContainer.parentNode.removeChild(this._optionsContainer);\n\n    // Prefer resetting the tabIndex property by using removeAttribute to lets the\n    // browser decide if it should go back to 0 (like if it was a button) or to\n    // -1 if it wasn't originally focusable.\n    this._select.removeAttribute('tabindex');\n    this._select.removeAttribute('aria-hidden');\n    this._button.removeAttribute('tabindex');\n    this._button.removeAttribute('aria-hidden');\n    this._button.removeAttribute('aria-haspopup');\n    this._button.removeAttribute('aria-controls');\n    this._button.removeAttribute('aria-expanded');\n\n    this._selectedOption = null;\n    this._optionsContainer = null;\n    this._button = null;\n    this._placeholder = null;\n    this._valueContainer = null;\n    this._select = null;\n    super.dispose();\n  }\n}\n\nDropdown.Classes = {\n  BASE: 'odo-dropdown',\n  OPEN: 'odo-dropdown--open',\n  BUTTON: 'odo-dropdown__button',\n  OPTIONS_CONTAINER_OPEN: 'odo-dropdown__options--open',\n  OPTIONS_CONTAINER: 'odo-dropdown__options',\n  OPTION: 'odo-dropdown__option',\n  OPTION_SELECTED: 'odo-dropdown__option--active',\n  OPTION_DISABLED: 'odo-dropdown__option--disabled',\n  SELECT: 'odo-dropdown__select',\n  VALUE: 'odo-dropdown__value',\n  DEFAULT: 'odo-dropdown__default',\n  BASE_NATIVE: 'odo-dropdown--native',\n};\n\nDropdown.Key = {\n  TAB: 9,\n  ENTER: 13,\n  ESC: 27,\n  SPACE: 32,\n  UP: 38,\n  DOWN: 40,\n};\n\nDropdown.EventType = {\n  CHANGE: 'ododropdown:change',\n};\n\nDropdown.Selector = {\n  ENABLED_OPTION: `.${Dropdown.Classes.OPTION}:not(.${Dropdown.Classes.OPTION_DISABLED})`,\n};\n\nDropdown.Defaults = {\n  insertMarkup: true,\n  useNative: OdoDevice.HAS_TOUCH_EVENTS,\n};\n\nexport default Dropdown;\n"],"names":["id","Dropdown","element","options","_OdoBaseComponent","Object","assign","Defaults","_isOpen","_select","_this","getElementByClass","Classes","SELECT","giveId","_label","document","querySelector","insertMarkup","_insertMarkup","_optionsContainer","OPTIONS_CONTAINER","_button","BUTTON","_placeholder","DEFAULT","_valueContainer","VALUE","_selectedOption","_getCustomSelectedOption","_onSelectChange","_handleSelectChange","bind","_onPageClick","_handlePageClick","_onButtonClick","_showOptions","_onKey","_handleKey","_transitionId","_initialize","setAttribute","this","useNative","_initializeNativeDropdown","_initializeCustomDropdown","getCustomOptions","selectedIndex","markup","getCustomOptionsHtml","insertAdjacentHTML","classList","add","BASE_NATIVE","addEventListener","tabIndex","_toggleButtonListener","e","code","which","Key","ESC","TAB","_hideOptions","DOWN","UP","preventDefault","_moveFocus","SPACE","ENTER","_selectOption","target","isNext","selector","Selector","ENABLED_OPTION","enabledOption","_nextMatch","activeElement","_prevMatch","focus","nextElementSibling","matches","previousElementSibling","option","closest","OPTION","contains","OPTION_DISABLED","value","getAttribute","emit","EventType","CHANGE","select","name","removeEventListener","cancelTransitionEnd","OPEN","causeLayout","OPTIONS_CONTAINER_OPEN","animation","onTransitionEnd","_handleOptionsShown","body","remove","_handleOptionsHidden","getOptionsMarkup","getNativeOptions","reduce","str","_this2","getOptionMarkup","selected","OPTION_SELECTED","disabled","text","getElementsByClass","Array","from","getDisplayText","toggleOptionByValue","isDisabled","customOption","nativeOption","toggle","removeAttribute","disableOptionByValue","enableOptionByValue","dispose","parentNode","removeChild","index","style","display","textContent","button","OdoBaseComponent","OdoDevice","HAS_TOUCH_EVENTS"],"mappings":"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"}