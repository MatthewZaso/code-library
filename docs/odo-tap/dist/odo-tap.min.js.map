{"version":3,"file":"odo-tap.min.js","sources":["../src/tap.js"],"sourcesContent":["import { Coordinate, events } from '@odopod/odo-helpers';\nimport OdoPointer from '@odopod/odo-pointer';\n\nlet count = 0;\nfunction uniqueId() {\n  count += 1;\n  return `OdoTap${count}`;\n}\n\n/**\n * Simply prevent the event's default action.\n * @param {Event} evt Event object.\n */\nconst preventDefaultEventAction = (evt) => {\n  evt.preventDefault();\n};\n\n/**\n * Interprets touchs on an element as taps.\n * @param {Element} element Element to watch.\n * @param {Function} fn Callback function when the element is tapped.\n * @param {boolean} preventEventDefault Whether or not to prevent the default\n *     event during drags.\n * @constructor\n */\nclass Tap {\n  constructor(element, fn, preventEventDefault) {\n    this.element = element;\n    this.fn = fn;\n    this.preventEventDefault = preventEventDefault;\n    this.pointer = new OdoPointer(element, {\n      preventEventDefault,\n    });\n\n    this._listen();\n  }\n\n  /**\n   * Add listener for the starting event.\n   * @private\n   */\n  _listen() {\n    this._onDragStart = this._handlePointerStart.bind(this);\n    this._onDragMove = this._handlePointerMove.bind(this);\n    this._onDragEnd = this._handlePointerEnd.bind(this);\n    this._onKeyUp = this._handleKeyUp.bind(this);\n\n    this.pointer.on(OdoPointer.EventType.START, this._onDragStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onDragMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onDragEnd);\n    this.element.addEventListener(events.KEYUP, this._onKeyUp);\n\n    // Prevent clicks from triggering things.\n    if (this.preventEventDefault) {\n      this.element.addEventListener(events.CLICK, preventDefaultEventAction);\n    }\n  }\n\n  /**\n   * Whether the current drag event has gone past the maximum threshold.\n   * @return {boolean}\n   * @private\n   */\n  _isPastThreshold() {\n    return Coordinate.distance(this.pointer.pageStart, this.pointer.page) > Tap.MAX_MOVEMENT;\n  }\n\n  /**\n   * Mouse/pointer down or touch start.\n   * @private\n   */\n  _handlePointerStart() {\n    this.hasDragged = false;\n  }\n\n  /**\n   * User's pointer moved.\n   * @private\n   */\n  _handlePointerMove() {\n    if (!this.hasDragged) {\n      this.hasDragged = this._isPastThreshold();\n    }\n  }\n\n  /**\n   * Dragging ended.\n   * @private\n   */\n  _handlePointerEnd(evt) {\n    if (!evt.isCancelEvent && this.pointer.deltaTime < Tap.MAX_TIME &&\n        !this.hasDragged) {\n      // Assume default should be prevented. Return true from the callback to\n      // allow the default event action.\n      if (this.fn(evt) !== true) {\n        evt.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * When the user presses the spacer bar or enter/return on their keyboard, it\n   * should be considered a \"tap\" as well.\n   * @param {Event} evt Event object.\n   */\n  _handleKeyUp(evt) {\n    if (evt.which === 13 || evt.which === 32) {\n      this.fn(evt);\n      evt.preventDefault();\n    }\n  }\n\n  /**\n   * Destroy instance.\n   */\n  dispose() {\n    this.element.removeEventListener(events.CLICK, preventDefaultEventAction);\n    this.element.removeEventListener(events.KEYUP, this._onKeyUp);\n    this.pointer.on(OdoPointer.EventType.START, this._onDragStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onDragMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onDragEnd);\n    this.pointer.dispose();\n    this.element = null;\n    this.fn = null;\n  }\n\n  /**\n   * Listens for taps on an element.\n   * @param {Element} element Element.\n   * @param {Function} fn Callback.\n   * @param {boolean=} preventDefault Optionally prevent the default event\n   *     during drag start and move.\n   * @return {string} The id to use to remove the listeners.\n   */\n  static addListener(element, fn, preventDefault = false) {\n    const id = uniqueId();\n    Tap._listeners.set(id, new Tap(element, fn, preventDefault));\n    return id;\n  }\n\n  /**\n   * Stop listening for taps on an element.\n   * @param {string} id Id returned from addListener.\n   */\n  static remove(id) {\n    if (Tap._listeners.get(id)) {\n      Tap._listeners.get(id).dispose();\n      Tap._listeners.delete(id);\n    }\n  }\n}\n\n/**\n * Maximum distance the user can tap and drag for the interaction to still\n * count as a tap.\n * @const {number}\n */\nTap.MAX_MOVEMENT = 10;\n\n/**\n * Maximum time between tap down and tap up for the interaction to still\n * count as a tap.\n * @const {number}\n */\nTap.MAX_TIME = 250;\n\n/**\n * Map of unique keys and tap instances.\n * @type {Map.<string, Tap>}\n * @private\n */\nTap._listeners = new Map();\n\nexport default Tap;\n"],"names":["count","preventDefaultEventAction","evt","preventDefault","Tap","element","fn","preventEventDefault","pointer","OdoPointer","_listen","_onDragStart","this","_handlePointerStart","bind","_onDragMove","_handlePointerMove","_onDragEnd","_handlePointerEnd","_onKeyUp","_handleKeyUp","on","EventType","START","MOVE","END","addEventListener","events","KEYUP","CLICK","_isPastThreshold","Coordinate","distance","pageStart","page","MAX_MOVEMENT","hasDragged","isCancelEvent","deltaTime","MAX_TIME","which","dispose","removeEventListener","addListener","id","_listeners","set","remove","get","delete","Map"],"mappings":"ycAGIA,EAAQ,EAUZ,IAAMC,EAA4B,SAACC,KAC7BC,kBAWAC,wBACQC,EAASC,EAAIC,kBAClBF,QAAUA,OACVC,GAAKA,OACLC,oBAAsBA,OACtBC,QAAU,IAAIC,EAAWJ,gCAIzBK,6BAOPA,wBACOC,aAAeC,KAAKC,oBAAoBC,KAAKF,WAC7CG,YAAcH,KAAKI,mBAAmBF,KAAKF,WAC3CK,WAAaL,KAAKM,kBAAkBJ,KAAKF,WACzCO,SAAWP,KAAKQ,aAAaN,KAAKF,WAElCJ,QAAQa,GAAGZ,EAAWa,UAAUC,MAAOX,KAAKD,mBAC5CH,QAAQa,GAAGZ,EAAWa,UAAUE,KAAMZ,KAAKG,kBAC3CP,QAAQa,GAAGZ,EAAWa,UAAUG,IAAKb,KAAKK,iBAC1CZ,QAAQqB,iBAAiBC,SAAOC,MAAOhB,KAAKO,UAG7CP,KAAKL,0BACFF,QAAQqB,iBAAiBC,SAAOE,MAAO5B,gBAShD6B,mCACSC,aAAWC,SAASpB,KAAKJ,QAAQyB,UAAWrB,KAAKJ,QAAQ0B,MAAQ9B,EAAI+B,0BAO9EtB,oCACOuB,YAAa,eAOpBpB,8BACOJ,KAAKwB,kBACHA,WAAaxB,KAAKkB,iCAQ3BZ,2BAAkBhB,IACXA,EAAImC,eAAiBzB,KAAKJ,QAAQ8B,UAAYlC,EAAImC,WAClD3B,KAAKwB,aAGa,IAAjBxB,KAAKN,GAAGJ,MACNC,8BAUViB,sBAAalB,GACO,KAAdA,EAAIsC,OAA8B,KAAdtC,EAAIsC,aACrBlC,GAAGJ,KACJC,+BAORsC,wBACOpC,QAAQqC,oBAAoBf,SAAOE,MAAO5B,QAC1CI,QAAQqC,oBAAoBf,SAAOC,MAAOhB,KAAKO,eAC/CX,QAAQa,GAAGZ,EAAWa,UAAUC,MAAOX,KAAKD,mBAC5CH,QAAQa,GAAGZ,EAAWa,UAAUE,KAAMZ,KAAKG,kBAC3CP,QAAQa,GAAGZ,EAAWa,UAAUG,IAAKb,KAAKK,iBAC1CT,QAAQiC,eACRpC,QAAU,UACVC,GAAK,QAWLqC,qBAAYtC,EAASC,OAAIH,0DACxByC,eAlIC,YAmIHC,WAAWC,IAAIF,EAAI,IAAIxC,EAAIC,EAASC,EAAIH,IACrCyC,KAOFG,gBAAOH,GACRxC,EAAIyC,WAAWG,IAAIJ,OACjBC,WAAWG,IAAIJ,GAAIH,YACnBI,WAAWI,OAAOL,iBAU5BxC,EAAI+B,aAAe,GAOnB/B,EAAImC,SAAW,IAOfnC,EAAIyC,WAAa,IAAIK"}