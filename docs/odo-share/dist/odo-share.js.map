{"version":3,"file":"odo-share.js","sources":["../src/services/facebook.js","../src/utils.js","../src/services/twitter.js","../src/services/googleplus.js","../src/services/tumblr.js","../src/services/linkedin.js","../src/services/email.js","../src/share.js"],"sourcesContent":["/**\n * Facebook\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [u=window.location.href] - URL of the page to share\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'http://www.facebook.com/sharer.php',\n  params: {\n    u: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Implodes an array into a comma-separated list, or returns the input\n * if the input is not an array.\n *\n * @param {string|array} input - The string or array to implode.\n * @return {string}\n */\nexport function implode(input) {\n  if (typeof input !== 'string') {\n    input = input.join(); // eslint-disable-line no-param-reassign\n  }\n\n  return encodeURIComponent(input);\n}\n\n/**\n * Implodes an array or string as well as strips a token from\n * the string or each item in the array. This is uesful for removing hastags or\n * @'s.\n *\n * @param {string|array} input - The string or array to implode.\n * @param {string} stripToken - The token to strip.\n * @return {string}\n */\nexport function implodeAndStrip(input, stripToken) {\n  if (typeof input === 'string') {\n    input = input.replace(', ', ',').split(','); // eslint-disable-line no-param-reassign\n  }\n\n  input = input.map(item => item.replace(stripToken, '')).join(); // eslint-disable-line no-param-reassign\n\n  return encodeURIComponent(input);\n}\n","import { implodeAndStrip } from '../utils';\n\n/**\n * Twitter\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [url=window.location.href] - URL of the page to share\n *  - via - Screen name of the user to attribute the\n *    Tweet to\n *  - text - Default Tweet text\n *  - related - Related accounts\n *  - [lang='en'] - The language for the Tweet Button\n *  - counturl - URL to which your shared URL resolves\n *  - hashtags - Comma separated hashtags appended to tweet text\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'https://twitter.com/intent/tweet',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n    via: {\n      friendly: 'via',\n      parse(input) {\n        return encodeURIComponent(input.replace('@', ''));\n      },\n    },\n    text: {\n      friendly: 'text',\n      parse: encodeURIComponent,\n    },\n    related: {\n      friendly: 'recommend',\n      parse(input) {\n        return implodeAndStrip(input, '@');\n      },\n    },\n    lang: {\n      friendly: 'language',\n      parse: encodeURIComponent,\n      default: 'en',\n    },\n    counturl: {\n      friendly: 'resolvesTo',\n      parse: encodeURIComponent,\n    },\n    hashtags: {\n      friendly: 'hashtags',\n      parse(input) {\n        return implodeAndStrip(input, '#');\n      },\n    },\n  },\n};\n","/**\n * Google Plus\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - url - URL of the page to share\n */\nexport default {\n  BASE: 'https://plus.google.com/share',\n  features: 'width=600,height=460,menubar=no,location=no,status=no',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Tumblr\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'https://www.tumblr.com/widgets/share/tool',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURI,\n      default: window.location.href,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURI,\n      default: document.title,\n    },\n    description: {\n      friendly: 'description',\n      parse: encodeURI,\n    },\n  },\n};\n","/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - mini\n *  - ro\n *  - title - Title of the page to share\n *  - url - URL of the page to share\n *\n * @see {@link https://www.linkedin.com/static?key=browser_bookmarklet}\n */\nexport default {\n  BASE: 'http://www.linkedin.com/shareArticle',\n  features: 'width=520,height=570,toolbar=0,location=0,status=0,scrollbars=yes',\n  params: {\n    mini: {\n      friendly: 'mini',\n      default: true,\n    },\n    ro: {\n      friendly: 'ro',\n      default: false,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","import { implode } from '../utils';\n\n/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'mailto:',\n  params: {\n    to: {\n      friendly: 'to',\n      parse: implode,\n    },\n    cc: {\n      friendly: 'cc',\n      parse: implode,\n    },\n    bcc: {\n      friendly: 'bcc',\n      parse: implode,\n    },\n    subject: {\n      friendly: 'subject',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    body: {\n      friendly: 'body',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Share component.\n *\n * @author Nathan Buchar\n */\n\nimport * as services from './services';\n\n/**\n * The window name for all share windows spawned by Share\n */\nconst WINDOW_NAME = 'ShareWindow';\nconst noop = () => {};\n\nclass Share {\n  /**\n   * Prepares share components within the DOM.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.ClassName = {\n      BASE: 'odo-share',\n    };\n\n    this.services = services;\n\n    // An array of share data objects. These objects may contain information\n    // regarding the root element, and beforeSend and afterSend functionality.\n    this.shares = [];\n\n    this._registerShareButtons();\n  }\n\n  /**\n   * This registers all Share components that are\n   * rendered to the DOM on page load. This will not prepare Share components\n   * that are added to the DOM dynamically. These must be registered using the\n   * public `add` method (@see add).\n   *\n   * @see _.add\n   */\n  _registerShareButtons() {\n    // Pass an array of objects to the `add` method. These objects simply contain\n    // an `element` key that references the DOM element.\n    this.add(Array.from(\n      document.querySelectorAll('.' + this.ClassName.BASE),\n      element => ({ element }),\n    ));\n  }\n\n  /**\n   * Normalize an option.\n   * @param {Object|Element} option Element or option object.\n   * @return {?Object}\n   */\n  _normalizeOption(option) {\n    if (option && option.nodeType === 1) {\n      // A DOM element was passed in.\n      return { element: option };\n    } else if (option && option.element) {\n      // A data object was passed in.\n      return option;\n    }\n\n    return null;\n  }\n\n  /**\n   * Normalize the options to an array of objects to add.\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   * @return {Array.<Object>} An array of new share data.\n   */\n  _normalizeOptions(options) {\n    let items;\n\n    if (Array.isArray(options)) {\n      items = options.map(this._normalizeOption, this);\n    } else {\n      items = [this._normalizeOption(options)];\n    }\n\n    return items.filter(item => !!item);\n  }\n\n  /**\n   * Iterates through each element passed into the method, prepares it and\n   * pushes the completed data object to the `shares` array.\n   *\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   */\n  add(options) {\n    const items = this._normalizeOptions(options);\n    const newShares = [];\n\n    items.forEach((data) => {\n      data.listener = (evt) => {\n        evt.preventDefault();\n        this.share(data);\n      };\n\n      data.element.addEventListener('click', data.listener);\n\n      this.shares.push(data);\n      newShares.push(data);\n    });\n\n    return newShares;\n  }\n\n  /**\n   * Performs the share operation. This will call the `before` method, reapply\n   * any modified input, open the window, then perform the `after` functionality.\n   *\n   * @param {object} input - The input data for the share as defined by the user.\n   * @param {object} output - The output data for the share as generated by the\n   *   Share internals, such as the query  string, window properties, and\n   *   parsed paramaters.\n   * @param {object} service - The service configuration. @see ./services\n   */\n  _performShare(input, output, service) {\n    const transformedData = input.before.call(this, output);\n\n    const action = (arg) => {\n      let windowObject;\n      let options;\n      let parsedOptions = output;\n\n      // Reapply new data if applicable.\n      if (arg !== undefined && arg !== null) {\n        if (arg === false) {\n          return;\n        } else if ('data' in arg) {\n          options = Object.assign(input, arg);\n        } else {\n          options = Object.assign(input, { data: arg });\n        }\n\n        parsedOptions = Share._parseInput(options, service);\n      }\n\n      if (service === this.services.email) {\n        // Prevent opening empty window if sharing via email.\n        this._navigate(parsedOptions.url);\n      } else {\n        // Open the share window.\n        windowObject = this._open(parsedOptions.url, parsedOptions.name, service.Features);\n      }\n\n      // Call the `after` functionality.\n      input.after.call(this, parsedOptions, windowObject);\n    };\n\n    // Return a promise from the `before` method to do something async.\n    if (transformedData && transformedData.then) {\n      transformedData.then(action);\n    } else {\n      action(transformedData);\n    }\n  }\n\n  /**\n   * Gets the service configuration from the given string.\n   *\n   * @param {object} data - Share input data.\n   * @return {object|undefined} - The service configuration, or void if no service was\n   *   defined.\n   */\n  _getService(data) {\n    const service = data.service || (data.element && data.element.getAttribute('data-service'));\n\n    if (this.services[service]) {\n      return this.services[service];\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Parses the given input and exports the technical output based\n   * on the service schema. This includes items such as the query string, window\n   * data, and params.\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} output - The parsed output.\n   * @see _parseparamsFromInput\n   * @see _getQueryString\n   * @see _constructWindowData\n   */\n  static _parseInput(input, service) {\n    const params = Share._parseParamsFromInput(input, service);\n    const queryString = Share._getQueryString(params);\n\n    return {\n      params,\n      queryString,\n      url: service.BASE + queryString,\n      name: WINDOW_NAME,\n    };\n  }\n\n  /**\n   * Parse the parameters from the given input and service schema. Defining a\n   * service schema allows us to always use \"url\" for all our share buttons,\n   * regardless of their service, as long as the proper key is defined in its\n   * respective parameter schema.\n   *\n   * If a parameter has a `parse` method within the object, this method will be\n   * called and will pass in the input value for that particular parameter. This\n   * allows us to customize how a parameter is parsed on a per-parameter and per-\n   * service basis without adding needless code within conditional blocks below.\n   *\n   * Order of priorities:\n   *   input value > `data` attributes (if applicable) > default > `void`\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} obj - The parsed parameters.\n   */\n  static _parseParamsFromInput(input, service) {\n    const elementData = input.element ? input.element.dataset : {};\n    const { data } = input;\n    const obj = {};\n\n    // Iterate through each valid paramater for the given service.\n    Object.keys(service.params).forEach((param) => {\n      const config = service.params[param];\n      const { friendly } = config;\n      let value = null;\n\n      // Check if the parameter was defined when `share` was called.\n      if (friendly in data) {\n        value = data[friendly];\n      } else if (friendly in elementData) {\n        // Check if the parameter is defined as a data attribute on the element.\n        value = elementData[friendly];\n      } else if (config.default) {\n        // The param was not defined; Check for default values.\n        value = config.default;\n      }\n\n      if (value) {\n        // Parse the parameter and set its value.\n        obj[param] = (config.parse ? config.parse(value) : value).toString();\n      }\n    });\n\n    return obj;\n  }\n\n  /**\n   * Assembles the query string from an enumerated param object.\n   *\n   * For example { foo: 'bar', baz: 'qux' } => \"?foo=bar&baz=qux\"\n   *\n   * @param {object} data - Parameter data.\n   * @return {string} query - The finalized query string.\n   */\n  static _getQueryString(data) {\n    let base = '';\n\n    // The mailto: format requires the `to` to be first, before the `?`.\n    if (data.to) {\n      base = data.to;\n      delete data.to;\n    }\n\n    const pairs = Object.keys(data).map(param => `${param}=${data[param]}`);\n    return `${base}?${pairs.join('&')}`;\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Opens a new browser window.\n   *\n   * @param {string} url - The URL to be loaded in the newly opened window.\n   * @param {string} windowName - A string name for the new window. The name\n   *   should not contain any whitespace characters. NOTE that windowName does not\n   *   specify the title of the new window. If a window with the same name already\n   *   exists, then the URL is loaded into the existing window.\n   * @return {object|null} - A reference to the newly created window. If the call\n   *   failed, it will be null. The reference can be used to access properties and\n   *   methods of the new window provided it complies with Same origin policy\n   *   security requirements.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open}\n   */\n  _open(url, windowName, windowFeatures = '') {\n    return window.open(url, windowName, windowFeatures);\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Navigate to a new location within the same tab. This is used to open the\n   * user's default email app.\n   * @param {string} url mailto url.\n   */\n  _navigate(url) {\n    window.location.assign(url);\n  }\n\n  /**\n   * Initiate sharing. Extend the default options, fetch the service,\n   * parse the input, then perform the share.\n   *\n   * @example\n   *   Share.share({\n   *     service: 'twitter',\n   *     data: {\n   *       url: 'http://odopod.com/'\n   *       text: 'Check this out!',\n   *       via: 'Nurun',\n   *       hashtags: ['rad', 'odoshare']\n   *     }\n   *   });\n   *\n   * @param {object} options - Share options.\n   * @return {boolean} - Will return true if the share was successfull.\n   */\n  share(options) {\n    const opts = Object.assign({}, Share.Options, options);\n\n    // Fetch the service config from the string provided.\n    const service = this._getService(opts);\n\n    // The service could not be determined or was not defined; Exit early.\n    if (!service) {\n      return false;\n    }\n\n    // Parse the output (params, query string, etc) from the data provided.\n    const output = Share._parseInput(opts, service);\n\n    // Perform the share operation.\n    this._performShare(opts, output, service);\n\n    return true;\n  }\n\n  /**\n   * Disposes of all references and event listeners to the share\n   * button. To reverse this, you must call `.add` and pass in the element and\n   * options again.\n   *\n   * @param {Element} element - A reference to the share button's element.\n   * @return {number|undefined} - If a share button was disposed, this will return `1`,\n   *   (the length of the number of items disposed of), otherwise this will not\n   *   return.\n   */\n  dispose(element) {\n    for (let i = 0; i < this.shares.length; i++) {\n      const data = this.shares[i];\n      if (data.element === element) {\n        data.element.removeEventListener('click', data.listener);\n        return this.shares.splice(i, 1).length;\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Default share input options. These may be overwritten by the user.\n */\nShare.Options = {\n  data: {},\n  before: noop,\n  after: noop,\n};\n\nexport default new Share();\n"],"names":["BASE","params","u","friendly","parse","encodeURIComponent","default","window","location","href","implode","input","join","implodeAndStrip","stripToken","replace","split","map","item","url","via","text","related","lang","counturl","hashtags","features","encodeURI","title","document","description","mini","ro","to","cc","bcc","subject","body","WINDOW_NAME","noop","Share","ClassName","services","shares","_registerShareButtons","add","Array","from","querySelectorAll","element","_normalizeOption","option","nodeType","_normalizeOptions","options","items","isArray","filter","newShares","forEach","data","listener","evt","preventDefault","share","addEventListener","push","_performShare","output","service","transformedData","before","call","action","arg","windowObject","parsedOptions","undefined","Object","assign","_parseInput","email","_navigate","_open","name","Features","after","then","_getService","getAttribute","_parseParamsFromInput","queryString","_getQueryString","elementData","dataset","obj","keys","param","config","value","toString","base","pairs","windowName","windowFeatures","open","opts","Options","dispose","i","length","removeEventListener","splice"],"mappings":"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"}