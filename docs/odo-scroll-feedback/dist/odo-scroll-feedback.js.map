{"version":3,"file":"odo-scroll-feedback.js","sources":["../src/scroll-feedback.js"],"sourcesContent":["/**\n * @fileoverview The `ScrollFeedback` class listens for input from the user:\n * mouse, keyboard, touch. Based on the input, the `ScrollFeedback` instance will\n * emit navigation events with a `direction` property signifying which way the\n * user should be taken.\n *\n * @author Glen Cheney <glen@odopod.com>\n */\n\nimport TinyEmitter from 'tiny-emitter';\n\n/*\n * Detect passive event listeners.\n * https://developers.google.com/web/updates/2017/01/scrolling-intervention\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js\n * https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n *\n * Weird istanbul ignore:\n * https://github.com/gotwarlost/istanbul/issues/445#issuecomment-150498338\n */\nlet supportsPassiveOption = false;\ntry {\n  window.addEventListener('test', null, {\n    get passive/* istanbul ignore next */() {\n      supportsPassiveOption = true;\n    },\n  });\n} catch (e) { /* continue */ }\n\nconst KeyCodes = {\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  UP: 38,\n  DOWN: 40,\n};\n\nclass ScrollFeedback extends TinyEmitter {\n  constructor(element, options) {\n    super();\n\n    this.element = element;\n\n    this.options = Object.assign({}, ScrollFeedback.Defaults, options);\n    this._listenerOptions = ScrollFeedback.PASSIVE_LISTENERS ? { passive: false } : false;\n\n    this.canScroll = true;\n    this._isUserPaused = false;\n    this.wheelTimeout = null;\n    this.scrollTimeout = null;\n    this.wheelAmount = { x: 0, y: 0 };\n    this.startPosition = { x: 0, y: 0 };\n\n    this._handleWheel = this._handleWheel.bind(this);\n    this._handleKeydown = this._handleKeydown.bind(this);\n    this._handleTouchStart = this._handleTouchStart.bind(this);\n    this._handleTouchMove = this._handleTouchMove.bind(this);\n    this._resume = this._resume.bind(this);\n    this._handleScrollTimerExpired = this._handleScrollTimerExpired.bind(this);\n    this._handleScrollEnd = this._handleScrollEnd.bind(this);\n\n    this.enable();\n  }\n\n  /**\n   * Enable the scroll feedback instance by adding event listeners.\n   */\n  enable() {\n    // `wheel` is the standard, but Safari<8 only supports `mousewheel`.\n    // IE9+, Chrome, Firefox, Opera all use `wheel`.\n    this.element.addEventListener('wheel', this._handleWheel, this._listenerOptions);\n    this.element.addEventListener('mousewheel', this._handleWheel, this._listenerOptions);\n\n    // Use the arrow keys to navigate next and previous as well.\n    document.addEventListener('keydown', this._handleKeydown, this._listenerOptions);\n\n    // Prevent touch events from scrolling the page. They need to be interpreted.\n    document.body.addEventListener('touchstart', this._handleTouchStart, this._listenerOptions);\n    document.body.addEventListener('touchmove', this._handleTouchMove, this._listenerOptions);\n    document.body.addEventListener('touchend', this._resume, this._listenerOptions);\n  }\n\n  /**\n   * Disable the instance by removing event listeners.\n   */\n  disable() {\n    this.element.removeEventListener('wheel', this._handleWheel, this._listenerOptions);\n    this.element.removeEventListener('mousewheel', this._handleWheel, this._listenerOptions);\n\n    document.removeEventListener('keydown', this._handleKeydown, this._listenerOptions);\n\n    document.body.removeEventListener('touchstart', this._handleTouchStart, this._listenerOptions);\n    document.body.removeEventListener('touchmove', this._touchmoveHandler, this._listenerOptions);\n    document.body.removeEventListener('touchend', this._resume, this._listenerOptions);\n  }\n\n  /**\n   * Mouse wheel event. The cross-browser code is from iScroll 5.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _handleWheel(evt) {\n    if (this._shouldIgnoreEvent(evt.target)) {\n      return;\n    }\n\n    if (this.canScroll) {\n      clearTimeout(this.scrollTimeout);\n      this.scrollTimeout = setTimeout(this._handleScrollTimerExpired,\n        this.options.scrollTimerDelay);\n\n      if (this._intentToNavigate(this.wheelAmount)) {\n        this._triggerNavigation(this.wheelAmount);\n        this._pause();\n      }\n    }\n\n    // Execute the scrollEnd event after 300ms the wheel stopped scrolling\n    clearTimeout(this.wheelTimeout);\n    this.wheelTimeout = setTimeout(this._handleScrollEnd, this.options.scrollEndDelay);\n\n    // Wheeling amount since the last wheel event.\n    const { x, y } = this._getWheelDelta(evt);\n\n    // Using prevent default all the time stops the swipe-to-go-back on the\n    // magic mouse (and probably others). Only prevent the default if there is\n    // no vertical movement and some horizontal movement.\n    if (!(y === 0 && Math.abs(x) > 0)) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n\n    // Keep a running total of the amount in each direction.\n    this.wheelAmount.x += x;\n    this.wheelAmount.y += y;\n  }\n\n  /**\n   * Before navigating, this function determines if the user has scrolled past\n   * the wheel threshold constant and that they have scrolled more Y (vertical)\n   * than X (horizontal).\n   * @param {{x: number, y: number}} delta Amount moved since last movement.\n   */\n  _intentToNavigate(delta) {\n    const absY = Math.abs(delta.y);\n    const absX = Math.abs(delta.x);\n\n    return absY > this.options.movementThreshold && absY > absX;\n  }\n\n  /**\n   * Trigger the navigation, after it's been determined the user's\n   * intent was to navigate.\n   */\n  _triggerNavigation(delta) {\n    const direction = delta.y < 0 ?\n      ScrollFeedback.Direction.NEXT :\n      ScrollFeedback.Direction.PREVIOUS;\n    this.navigate(direction);\n  }\n\n  /**\n   * Scroll events stopped firing. Reset some things and notify.\n   * @private\n   */\n  _handleScrollEnd() {\n    clearTimeout(this.scrollTimeout);\n    this.wheelTimeout = null;\n    this._resume();\n    this.emit(ScrollFeedback.Events.SCROLL_END);\n    this.wheelAmount = {\n      x: 0,\n      y: 0,\n    };\n  }\n\n  /**\n   * The scroll timer starts when the first intent to navigate is called. If the\n   * user keeps scrolling the page, this timer will expire and trigger the scroll\n   * end event to happen.\n   */\n  _handleScrollTimerExpired() {\n    clearTimeout(this.wheelTimeout);\n    this._handleScrollEnd();\n  }\n\n  /**\n   * Event listener for key down. If a special key is pressed, this class will\n   * emit an event with the direction the page should go.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _handleKeydown(evt) {\n    let direction = null;\n\n    switch (evt.which) {\n      // Up and page up.\n      // Falls through\n      case KeyCodes.UP:\n      case KeyCodes.PAGE_UP:\n        direction = ScrollFeedback.Direction.PREVIOUS;\n        break;\n\n      // Down arrow and page down.\n      // Falls through\n      case KeyCodes.DOWN:\n      case KeyCodes.PAGE_DOWN:\n        direction = ScrollFeedback.Direction.NEXT;\n        break;\n\n      // Space bar normally scrolls the page down, advance to the next\n      // waypoint on spacebar press. Holding shift and pressing space scrolls\n      // the page up.\n      case KeyCodes.SPACE:\n        if (evt.shiftKey) {\n          direction = ScrollFeedback.Direction.PREVIOUS;\n        } else {\n          direction = ScrollFeedback.Direction.NEXT;\n        }\n\n        break;\n\n      case KeyCodes.HOME:\n        direction = ScrollFeedback.Direction.START;\n        break;\n\n      case KeyCodes.END:\n        direction = ScrollFeedback.Direction.END;\n        break;\n\n      // no default\n    }\n\n    if (direction) {\n      // Stop up and down from scrolling the page.\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.canScroll) {\n        this.navigate(direction);\n      }\n    }\n  }\n\n  /**\n   * Save the starting position of the user's finger on touch start.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _handleTouchStart(evt) {\n    this.startPosition = {\n      x: evt.changedTouches[0].pageX,\n      y: evt.changedTouches[0].pageY,\n    };\n  }\n\n  /**\n   * Emits a navigation event if the user has moved their finger far enough.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _handleTouchMove(evt) {\n    if (this._shouldIgnoreEvent(evt.target)) {\n      return;\n    }\n\n    if (!this.canScroll) {\n      evt.preventDefault();\n      return;\n    }\n\n    const pos = {\n      x: evt.changedTouches[0].pageX,\n      y: evt.changedTouches[0].pageY,\n    };\n\n    const delta = {\n      x: pos.x - this.startPosition.x,\n      y: pos.y - this.startPosition.y,\n    };\n\n    if (this._intentToNavigate(delta)) {\n      evt.preventDefault();\n      this._triggerNavigation(delta);\n      this._pause();\n    }\n  }\n\n  /**\n   * Calculate the amount of wheeling since the last wheel event.\n   *\n   * Info on deltaMode in Firefox https://github.com/cubiq/iscroll/issues/577\n   * Wheel event on MDN https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n   *\n   * @param {WheelEvent} e Event object.\n   * @return {{x: number, y: number}}\n   * @private\n   */\n  _getWheelDelta(e) {\n    let wheelDeltaX;\n    let wheelDeltaY;\n\n    // Normalize the wheel delta value.\n    if ('deltaX' in e) {\n      // deltaMode can be three different values: pixels, lines, or pages. 0, 1, or 2.\n      if (e.deltaMode === 1) {\n        wheelDeltaX = -e.deltaX * ScrollFeedback.MOUSE_WHEEL_SPEED;\n        wheelDeltaY = -e.deltaY * ScrollFeedback.MOUSE_WHEEL_SPEED;\n      } else {\n        wheelDeltaX = -e.deltaX;\n        wheelDeltaY = -e.deltaY;\n      }\n\n      // Support Safari<8\n    } else if ('wheelDeltaX' in e) {\n      wheelDeltaX = e.wheelDeltaX / 120 * ScrollFeedback.MOUSE_WHEEL_SPEED;\n      wheelDeltaY = e.wheelDeltaY / 120 * ScrollFeedback.MOUSE_WHEEL_SPEED;\n    }\n\n    return {\n      x: wheelDeltaX,\n      y: wheelDeltaY,\n    };\n  }\n\n  /**\n   * If the element which received the touch move event is one which should\n   * be ignored, exit immidiately.\n   * @param {Element} element Element to test.\n   * @return {boolean} Whether to ignore the event or not.\n   */\n  _shouldIgnoreEvent(element) {\n    return !!this.options.ignore && element.closest(this.options.ignore) !== null;\n  }\n\n  /**\n   * Emits a NAVIGATE event with a direction.\n   * @param {ScrollFeedback.Direction} direction Direction to navigate.\n   */\n  navigate(direction) {\n    this.emit(ScrollFeedback.Events.NAVIGATE, {\n      direction,\n    });\n  }\n\n  /**\n   * Scroll and touch events will not be counted as input.\n   */\n  _pause() {\n    this.canScroll = false;\n  }\n\n  /**\n   * Only set the can scroll flag to true when the user of this component has\n   * not paused it.\n   */\n  _resume() {\n    if (!this._isUserPaused) {\n      this.canScroll = true;\n    }\n  }\n\n  /**\n   * Scroll and touch events will not be counted as input.\n   */\n  pause() {\n    this._isUserPaused = true;\n    this._pause();\n  }\n\n  /**\n   * Counts scrolls and touch events as inputs.\n   */\n  resume() {\n    this._isUserPaused = false;\n    this._resume();\n  }\n\n  /**\n   * Remove DOM references and event handlers.\n   */\n  dispose() {\n    clearTimeout(this.scrollTimeout);\n    clearTimeout(this.wheelTimeout);\n    this.disable();\n    this.element = null;\n  }\n}\n\n/** @enum {string} */\nScrollFeedback.Events = {\n  NAVIGATE: 'odoscrollfeedback:navigate',\n  SCROLL_END: 'odoscrollfeedback:scrollend',\n};\n\n/** @enum {number} */\nScrollFeedback.Direction = {\n  START: 1,\n  PREVIOUS: 2,\n  NEXT: 3,\n  END: 4,\n};\n\n/**\n * Options which can be overriden for the input handler.\n * @type {Object}\n */\nScrollFeedback.Defaults = {\n  ignore: null, // A selector string matching elements which should not be interpreted\n  movementThreshold: 5, // Amount needed in deltaY (touch or mouse wheel) before event is emitted.\n  scrollEndDelay: 350, // The amount of time between scrolls to trigger scroll end\n  scrollTimerDelay: 2000, // Delay before one continuous scroll triggers scroll end\n};\n\nScrollFeedback.MOUSE_WHEEL_SPEED = 20;\n\nScrollFeedback.PASSIVE_LISTENERS = supportsPassiveOption;\n\nexport default ScrollFeedback;\n"],"names":["supportsPassiveOption","addEventListener","passive","e","KeyCodes","ScrollFeedback","element","options","Object","assign","Defaults","_listenerOptions","PASSIVE_LISTENERS","canScroll","_isUserPaused","wheelTimeout","scrollTimeout","wheelAmount","x","y","startPosition","_handleWheel","bind","_handleKeydown","_handleTouchStart","_handleTouchMove","_resume","_handleScrollTimerExpired","_handleScrollEnd","enable","body","disable","removeEventListener","_touchmoveHandler","evt","_shouldIgnoreEvent","target","setTimeout","scrollTimerDelay","_intentToNavigate","_triggerNavigation","_pause","scrollEndDelay","_getWheelDelta","Math","abs","preventDefault","stopPropagation","delta","absY","absX","movementThreshold","direction","Direction","NEXT","PREVIOUS","navigate","emit","Events","SCROLL_END","which","UP","PAGE_UP","DOWN","PAGE_DOWN","SPACE","shiftKey","HOME","START","END","changedTouches","pageX","pageY","pos","wheelDeltaX","wheelDeltaY","deltaMode","deltaX","MOUSE_WHEEL_SPEED","deltaY","ignore","closest","NAVIGATE","pause","resume","dispose","TinyEmitter"],"mappings":"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"}