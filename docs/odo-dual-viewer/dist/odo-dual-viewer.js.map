{"version":3,"file":"odo-dual-viewer.js","sources":["../src/settings.js","../src/dual-viewer.js"],"sourcesContent":["export default {\n  Position: {\n    START: 0,\n    CENTER: 1,\n    END: 2,\n    BETWEEN: 3,\n  },\n\n  ClassName: {\n    VERTICAL: 'odo-dual-viewer--vertical',\n    INNER: 'odo-dual-viewer__inner',\n    SCRUBBER_CONTAINER: 'odo-dual-viewer__scrubber-bounds',\n    SCRUBBER: 'odo-dual-viewer__scrubber',\n    OVERLAY: 'odo-dual-viewer__overlay',\n    UNDERLAY: 'odo-dual-viewer__underlay',\n    MEDIA: 'odo-dual-viewer__media',\n\n    // States\n    GRABBING: 'grabbing',\n    CENTERED: 'is-centered',\n    START: 'is-start',\n    END: 'is-end',\n  },\n\n  EventType: {\n    CAME_TO_REST: 'ododualviewer:handlecametorest',\n  },\n\n  Defaults: {\n    startPosition: 0.5,\n    isVertical: false,\n    animationDuration: 300,\n    verticalSafeZone: 0.1,\n    hasZones: true,\n    zones: [0.33, 0.33, 0.66, 0.66],\n  },\n};\n","import TinyEmitter from 'tiny-emitter';\nimport { animation, math } from '@odopod/odo-helpers';\nimport OdoDraggable from '@odopod/odo-draggable';\nimport OdoWindowEvents from '@odopod/odo-window-events';\nimport OdoObjectFit from '@odopod/odo-object-fit';\nimport settings from './settings';\n\nclass DualViewer extends TinyEmitter {\n  /**\n   * Component which has a draggable element in the middle which reveals one or\n   * the other sides as the user drags.\n   *\n   * @constructor\n   */\n  constructor(el, opts) {\n    super();\n\n    this.element = el;\n\n    this.options = Object.assign({}, DualViewer.Defaults, opts);\n\n    this._isVertical = this.options.isVertical;\n\n    /** @private {Element} */\n    this._scrubberEl = null;\n\n    /** @private {Element} */\n    this._overlayEl = null;\n\n    /** @private {Element} */\n    this._underlayEl = null;\n\n    /** @private {Element} */\n    this._overlayObjectEl = null;\n\n    /**\n     * Dragger component\n     * @type {OdoDraggable}\n     * @private\n     */\n    this._draggable = null;\n\n    /**\n     * Boundary for the scrubber.\n     * @type {Rect}\n     * @private\n     */\n    this._scrubberLimits = null;\n\n    /**\n     * The axis to drag depends on the carousel direction.\n     * @type {OdoPointer.Axis}\n     * @private\n     */\n    this._dragAxis = this._isVertical ? 'y' : 'x';\n\n    /**\n     * Height or width.\n     * @type {string}\n     * @private\n     */\n    this._dimensionAttr = this._isVertical ? 'height' : 'width';\n\n    /**\n     * Previous percentage revealed. Needed for window resizes to reset back to\n     * correct position.\n     * @type {number}\n     * @private\n     */\n    this._previousPercent = this.options.startPosition;\n\n    /**\n     * Current position of the dual viewer.\n     * @type {number}\n     * @private\n     */\n    this._position = DualViewer.Position.CENTER;\n\n    /** @private {boolean} */\n    this._isResting = true;\n\n    this.decorate();\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired element.\n   * @return {?Element} The element or null if not found.\n   */\n  getElementByClass(className) {\n    return this.element.querySelector('.' + className);\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired elements.\n   * @return {NodeList} An array like object of elements.\n   */\n  getElementsByClass(className) {\n    return this.element.querySelectorAll('.' + className);\n  }\n\n  decorate() {\n    this._scrubberEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER);\n    this._overlayEl = this.getElementByClass(DualViewer.ClassName.OVERLAY);\n    this._underlayEl = this.getElementByClass(DualViewer.ClassName.UNDERLAY);\n\n    this._overlayObjectEl = this._overlayEl.firstElementChild;\n\n    this._draggable = new OdoDraggable(this._scrubberEl, {\n      axis: this._dragAxis,\n    });\n\n    // Add vertical class if it's vertical and the is-centered class.\n    this.element.classList.toggle(DualViewer.ClassName.VERTICAL, this._isVertical);\n    this.element.classList.add(DualViewer.ClassName.CENTERED);\n\n    this._setupHandlers();\n\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    this.setPosition(this.options.startPosition);\n  }\n\n  _setupHandlers() {\n    this._resizeId = OdoWindowEvents.onResize(this.reset.bind(this));\n    this._onMove = this._handleDragMove.bind(this);\n    this._onEnd = this._handleDragEnd.bind(this);\n\n    this._draggable.on(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.on(OdoDraggable.EventType.END, this._onEnd);\n  }\n\n  /**\n   * Sets the containing box for the scrubber to stay within.\n   * @private\n   */\n  _saveScrubberLimits() {\n    let limits;\n\n    if (this._isVertical) {\n      const top = this._containerHeight * this.options.verticalSafeZone;\n      const height = this._containerHeight * (1 - (this.options.verticalSafeZone * 2));\n      limits = new math.Rect(0, top, this._containerWidth, height);\n    } else {\n      const containingEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER_CONTAINER);\n      const mainRect = this.element.getBoundingClientRect();\n      const containingRect = containingEl.getBoundingClientRect();\n\n      limits = new math.Rect(\n        Math.round(containingRect.left - mainRect.left),\n        containingEl.offsetTop,\n        containingEl.offsetWidth,\n        this._containerHeight,\n      );\n    }\n\n    this._scrubberLimits = limits;\n  }\n\n  /**\n   * Returns the dual viewer's current position.\n   * @return {number} Position number. Look at the DualViewer.\n   *   Position enum for reference.\n   */\n  getPosition() {\n    return this._position;\n  }\n\n  /**\n   * Set the position of the scrubber and the amount revealed.\n   * @param {number} position Percentage to be revealed. A number between zero and one.\n   */\n  setPosition(position) {\n    // Draggable clamps this based on the axis.\n    this._draggable.setPosition(position * 100, position * 100);\n    this._reveal(position);\n  }\n\n  /**\n   * Clamps a percentage value to the boundaries of the scrubber.\n   * @param  {number} percent Number between zero and one.\n   * @return {number} Clamped percentage between the left and right boundaries if\n   *     the dual viewer is horizontal, or the top and bottom boundaries if the\n   *     dual viewer is vertical.\n   * @private\n   */\n  _getLimitedPercent(percent) {\n    const rect = this._scrubberLimits;\n    let min;\n    let max;\n\n    if (this._isVertical) {\n      min = rect.top / this._containerHeight;\n      max = (rect.top + rect.height) / this._containerHeight;\n    } else {\n      min = rect.left / this._containerWidth;\n      max = (rect.left + rect.width) / this._containerWidth;\n    }\n\n    return math.clamp(percent, min, max);\n  }\n\n  /**\n   * Caches the main element's dimensions.\n   * @private\n   */\n  _saveContainerSize() {\n    this._containerWidth = this.element.offsetWidth;\n    this._containerHeight = this.element.offsetHeight;\n  }\n\n  /**\n   * Toggle state classes.\n   * @private\n   */\n  _removeStateClasses() {\n    this.element.classList.remove(\n      DualViewer.ClassName.START,\n      DualViewer.ClassName.END,\n      DualViewer.ClassName.CENTERED,\n    );\n\n    this._isResting = false;\n  }\n\n  /**\n   * Reveals or covers up the second object.\n   * @param {number} percent Number between zero and one.\n   * @private\n   */\n  _reveal(percent) {\n    this._overlayEl.style[this._dimensionAttr] = percent * 100 + '%';\n    this._overlayObjectEl.style[this._dimensionAttr] = 100 / percent + '%';\n  }\n\n  /**\n   * Resets the scrubber position, scrubber limits, draggable position, and amount\n   * revealed based new width/height measurements and the previous position of the\n   * scrubber.\n   */\n  reset() {\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    const percent = this._previousPercent * 100;\n    this._draggable.setPosition(percent, percent);\n\n    this._reveal(this._getLimitedPercent(this._previousPercent));\n  }\n\n  /**\n   * Dragged.\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragMove(evt) {\n    if (this._isResting) {\n      this._removeStateClasses();\n      this._position = DualViewer.Position.BETWEEN;\n    }\n\n    const percentRevealed = evt.position.percent[this._dragAxis] / 100;\n\n    // Save value because if the window is resized, the scrubber will be way off.\n    this._previousPercent = percentRevealed;\n\n    this._reveal(percentRevealed);\n  }\n\n  /**\n   * Dragging ended.\n   *\n   * Default zones shown below.\n   * L = lower zone.\n   * M = middle zone.\n   * U = upper zone.\n   *\n   * +-------------------------------------+\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * |    L     |   |   M   |   |     U    |\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * +-------------------------------------+\n   *         |          |         |\n   *        0.25       0.5       0.75\n   *\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragEnd(evt) {\n    if (!this.options.hasZones) {\n      return;\n    }\n\n    // Percentage revealed.\n    const revealed = evt.position.percent[this._dragAxis] / 100;\n    this._position = this._getZone(revealed);\n\n    let percent = null;\n    switch (this._position) {\n      case DualViewer.Position.START:\n        percent = 0;\n        break;\n      case DualViewer.Position.CENTER:\n        percent = 0.5;\n        break;\n      case DualViewer.Position.END:\n        percent = 1;\n        break;\n      // no default\n    }\n\n    if (percent !== null) {\n      this.animateTo(percent);\n    }\n  }\n\n  _getZone(revealed) {\n    if (revealed > 0 && revealed < this.options.zones[0]) {\n      return DualViewer.Position.START;\n    }\n\n    if (revealed < 1 && revealed > this.options.zones[3]) {\n      return DualViewer.Position.END;\n    }\n\n    if (revealed >= this.options.zones[1] && revealed <= this.options.zones[2]) {\n      return DualViewer.Position.CENTER;\n    }\n\n    return DualViewer.Position.BETWEEN;\n  }\n\n  /**\n   * Animate the dual viewer to a percentage.\n   * @param {number} toPercent Percent to animate to. It will get clamped to the\n   *     scrubber's limits. This is a number between zero and one.\n   */\n  animateTo(toPercent) {\n    // Clamp to boundaries.\n    const percent = this._getLimitedPercent(toPercent);\n\n    // Don't animate if the handle isn't going anywhere.\n    if (percent === this._previousPercent) {\n      return;\n    }\n\n    this._position = this._getZone(percent);\n\n    this._removeStateClasses();\n\n    const stepper = new animation.Stepper({\n      start: this._previousPercent,\n      end: percent,\n      duration: this.options.animationDuration,\n      step: this._animateStep,\n      context: this,\n    });\n\n    stepper.onfinish = this._didComeToRest;\n  }\n\n  /**\n   * The tick function. Sets the handle and revealer.\n   * @param {number} position Applied percentage added to the starting point.\n   * @private\n   */\n  _animateStep(position) {\n    // Move handle.\n    this._draggable.setPosition(position * 100, position * 100);\n\n    // Move reveals.\n    this._reveal(position);\n  }\n\n  /**\n   * Dual Viewer animation came to rest. Toggle classes and states.\n   * @private\n   */\n  _didComeToRest() {\n    this._previousPercent = this._draggable.getPosition(true)[this._dragAxis] / 100;\n    this._isResting = true;\n\n    this.element.classList.toggle(\n      DualViewer.ClassName.START,\n      this._position === DualViewer.Position.START,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.END,\n      this._position === DualViewer.Position.END,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.CENTERED,\n      this._position === DualViewer.Position.CENTER,\n    );\n\n    // Emit event.\n    this.emit(DualViewer.EventType.CAME_TO_REST, {\n      position: this.getPosition(),\n    });\n  }\n\n  /**\n   * Reset the style attribute for the properties we might have manipulated.\n   */\n  dispose() {\n    OdoWindowEvents.remove(this._resizeId);\n\n    this._draggable.off(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.off(OdoDraggable.EventType.END, this._onEnd);\n\n    this._draggable.dispose();\n\n    this.element.classList.remove(\n      DualViewer.ClassName.CENTERED,\n      DualViewer.ClassName.VERTICAL,\n    );\n\n    this.element = null;\n    this._scrubberEl = null;\n    this._overlayObjectEl = null;\n    this._overlayEl = null;\n    this._underlayEl = null;\n  }\n}\n\nObject.assign(DualViewer, settings);\n\nexport default DualViewer;\n"],"names":["DualViewer","el","opts","element","options","Object","assign","Defaults","_isVertical","isVertical","_scrubberEl","_overlayEl","_underlayEl","_overlayObjectEl","_draggable","_scrubberLimits","_dragAxis","_dimensionAttr","_previousPercent","startPosition","_position","Position","CENTER","_isResting","decorate","getElementByClass","className","querySelector","getElementsByClass","querySelectorAll","ClassName","SCRUBBER","OVERLAY","UNDERLAY","firstElementChild","OdoDraggable","classList","toggle","VERTICAL","add","CENTERED","_setupHandlers","_saveContainerSize","_saveScrubberLimits","cover","MEDIA","setLimits","setPosition","_resizeId","OdoWindowEvents","onResize","reset","bind","_onMove","_handleDragMove","_onEnd","_handleDragEnd","on","EventType","MOVE","END","limits","top","_containerHeight","verticalSafeZone","height","math","Rect","_containerWidth","containingEl","SCRUBBER_CONTAINER","mainRect","getBoundingClientRect","containingRect","Math","round","left","offsetTop","offsetWidth","getPosition","position","_reveal","_getLimitedPercent","percent","rect","min","max","width","clamp","offsetHeight","_removeStateClasses","remove","START","style","evt","BETWEEN","percentRevealed","hasZones","revealed","_getZone","animateTo","zones","toPercent","stepper","animation","Stepper","animationDuration","_animateStep","onfinish","_didComeToRest","emit","CAME_TO_REST","dispose","off","TinyEmitter","settings"],"mappings":"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"}