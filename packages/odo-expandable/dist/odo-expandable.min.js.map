{"version":3,"file":"odo-expandable.min.js","sources":["../src/settings.js","../src/expandable-item.js","../src/expandable-group.js","../src/expandable-accordion.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'odo-expandable__trigger--open',\n    TARGET_OPEN: 'odo-expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    GROUP: 'data-expandable-group',\n    ANIMATED: 'data-expandable-animated',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso <matt.zaso@odopod.com>\n */\nimport Settings from './settings';\n\nclass ExpandableItem {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this.trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this.target = document.body.querySelector(`[${Settings.Attribute.TARGET}=\"${id}\"]`);\n\n    /** @type {boolean} */\n    this.isOpen = this.target.classList.contains(Settings.ClassName.TARGET_OPEN);\n\n    this._setA11yAttributes();\n\n    if (this.isOpen) {\n      this.open();\n    }\n\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest === this.trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setA11yAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this.trigger.setAttribute('aria-describedby', elementId);\n    this.target.setAttribute('id', elementId);\n    this.trigger.setAttribute('aria-expanded', this.isOpen.toString());\n    this.trigger.setAttribute('aria-controls', elementId);\n    this.target.setAttribute('aria-labelledby', elementId);\n    this.target.setAttribute('aria-hidden', (!this.isOpen).toString());\n  }\n\n  /**\n   * Removes the ARIA attributes assigned on instantiation.\n   * @private\n   */\n  _removeA11yAttributes() {\n    this.trigger.removeAttribute('aria-describedby');\n    this.target.removeAttribute('id');\n    this.trigger.removeAttribute('aria-expanded');\n    this.target.removeAttribute('aria-labelledby');\n    this.target.removeAttribute('aria-hidden');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this.target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this.trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this.trigger.setAttribute('aria-expanded', 'true');\n    this.target.setAttribute('aria-hidden', 'false');\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this.target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this.trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this.trigger.setAttribute('aria-expanded', 'false');\n    this.target.setAttribute('aria-hidden', 'true');\n    this.isOpen = false;\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n\n    this._removeA11yAttributes();\n  }\n}\n\nObject.assign(ExpandableItem, Settings);\n\nexport default ExpandableItem;\n","/**\n * @fileoverview A wrapper for multiple Expandable elements that will\n * allow them to operate coherently in an accordion type fashion.\n *\n * @author Matt Zaso <matt.zaso@odopod.com>\n */\nimport Settings from './settings';\nimport ExpandableItem from './expandable-item';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    /** @type {Array.<!Element>} */\n    this._elements = elements;\n\n    /**\n     * @type {Array.<!ExpandableItem>}\n     * @protected\n     */\n    this.expandables = elements.map(trigger => new ExpandableItem(\n      trigger.getAttribute(Settings.Attribute.TRIGGER),\n      { groupedItem: true },\n    ));\n\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {MouseEvent} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (this._elements.includes(closest)) {\n      this.toggleVisibility(closest.getAttribute(Settings.Attribute.TRIGGER));\n    }\n  }\n\n  /**\n   * Will iterate over all grouped items and toggle the selected one while collapsing all others.\n   * @param {string} id The ID of the selected target to expand.\n   * @private\n   */\n  toggleVisibility(id) {\n    this.expandables.forEach((expandable) => {\n      if (expandable.id === id) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers. Will also dispose all child\n   * instances.\n   * @public\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onClick);\n    this.expandables.forEach(item => item.dispose());\n  }\n}\n\nObject.assign(ExpandableGroup, Settings);\n\nexport default ExpandableGroup;\n","/**\n * @fileoverview A subclass of ExpandableGroup which includes some additional\n * features like scrolling and collapsing animations.\n *\n * @author Matt Zaso <matt.zaso@odopod.com>\n */\nimport { scrollTo } from '@odopod/odo-helpers';\nimport OdoWindowEvents from '@odopod/odo-window-events';\nimport ExpandableGroup from './expandable-group';\n\nclass ExpandableAccordion extends ExpandableGroup {\n  constructor(elements) {\n    super(elements);\n\n    /**\n     * @type {Array.<{id: string, offset: number}>} Object A map of the expandable offsets.\n     */\n    this._expandableOffsets = [];\n\n    // Set the initial value of each element based on its state.\n    this.update();\n\n    // A resize handler for when the DOM updates.\n    this._resizeId = OdoWindowEvents.onResize(this.update.bind(this));\n  }\n\n  /**\n   * Called by OdoWindowEvents when the browser is resized. Allows us to update\n   * our saved offsets and animate to their new positions.\n   * @private\n   */\n  update() {\n    // Find any already open expandables.\n    const openExpandables = this.expandables.map(expandable => expandable.isOpen);\n\n    // Set the transition duration to zero so there is no animation when measuring.\n    this.expandables.forEach((expandable) => {\n      expandable.target.style.transitionDuration = '0s';\n      expandable.close();\n      this._setHeight(expandable, false);\n    });\n\n    // Save offsets now that all expandables are collapsed.\n    this._expandableOffsets = this._getOffsets();\n\n    // Reopen any expandables that were open before.\n    this.expandables.forEach((expandable, i) => {\n      this._setHeight(expandable, openExpandables[i]);\n    });\n\n    // Cause the browser to do a layout and set the heights of the elements\n    // with a transition duration of zero.\n    this.expandables[0].trigger.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Now that everything has been reset, enable transitions again.\n    this.expandables.forEach((expandable, i) => {\n      expandable.target.style.transitionDuration = '';\n      if (openExpandables[i]) {\n        expandable.open();\n      }\n    });\n  }\n\n  /**\n   * When an item is clicked, we animate the accordion.\n   * @override\n   */\n  toggleVisibility(id) {\n    this.expandables.forEach((expandable) => {\n      this._animateHeight(expandable, expandable.id === id);\n    });\n    super.toggleVisibility(id);\n    this._scrollToSelected(id);\n  }\n\n  /**\n   * On load and any other time the DOM updates, this function will save the offsets\n   * of each accordion item into an object so we don't have to read the DOM every time.\n   * @private\n   * @return {Array.<{id: string, offset: number}>}\n   */\n  _getOffsets() {\n    const scrollY = window.pageYOffset;\n    return this.expandables.map(expandable => ({\n      id: expandable.id,\n      offset: scrollY + expandable.trigger.getBoundingClientRect().top,\n    }));\n  }\n\n  /**\n   * When called we will check the accordion's position in the viewport and scroll\n   * the user into view if needed.\n   * @param {string} id The id of the ExpandableItem that was clicked.\n   * @private\n   */\n  _scrollToSelected(id) {\n    const item = this._expandableOffsets.find(item => item.id === id);\n    if (item.offset < window.pageYOffset) {\n      scrollTo(item.offset, 300);\n    }\n  }\n\n  /**\n   * Sets the height of a given Expandable item.\n   * @param {Expandable} expandable The Expandable instance to modify.\n   * @param {boolean} setToOpen Whether we setting the Expandable to it's open state.\n   */\n  _setHeight(expandable, setToOpen) {\n    const contentHeight = setToOpen ? expandable.target.firstElementChild.offsetHeight : 0;\n    expandable.target.style.height = `${contentHeight}px`;\n  }\n\n  /**\n   * Called if we need to alter the Expandable state. Only does so if either the same\n   * Expandable that is open is clicked or another one was clicked and this one needs\n   * to be closed.\n   * @param {Expandable} expandable The expandable to test and potentially alter.\n   * @param {boolean} isTarget Whether or not the current expandable was the one clicked.\n   */\n  _animateHeight(expandable, isTarget) {\n    if (isTarget || expandable.isOpen) {\n      this._setHeight(expandable, !expandable.isOpen);\n    }\n  }\n\n  /**\n   * Remove the resize handler and dispose.\n   * @override\n   */\n  dispose() {\n    super.dispose();\n    OdoWindowEvents.remove(this._resizeId);\n  }\n}\n\nexport default ExpandableAccordion;\n","import Settings from './settings';\nimport ExpandableGroup from './expandable-group';\nimport ExpandableItem from './expandable-item';\nimport ExpandableAccordion from './expandable-accordion';\n\n/**\n * Instantiates all instances of the expandable. Groups are instantiated separate from\n * Expandables and require different parameters. This helper chunks out and groups the\n * grouped expandables before instantiating all of them.\n *\n * @return {Array.<ExpandableItem|ExpandableGroup|ExpandableAccordion>} all instances of both types.\n * @public\n */\nexport function initializeAll() {\n  const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n  const singleInstances = [];\n  const groupInstances = [];\n  const groupIds = [];\n\n  elements.forEach((item) => {\n    const groupId = item.getAttribute(Settings.Attribute.GROUP);\n    if (groupId) {\n      if (!groupIds.includes(groupId)) {\n        const group = elements.filter(el => el.getAttribute(Settings.Attribute.GROUP) === groupId);\n        const isAnimated = group.some(el => el.hasAttribute(Settings.Attribute.ANIMATED));\n        groupInstances.push(isAnimated ?\n          new ExpandableAccordion(group) :\n          new ExpandableGroup(group));\n        groupIds.push(groupId);\n      }\n    } else {\n      singleInstances.push(new ExpandableItem(item.getAttribute(Settings.Attribute.TRIGGER)));\n    }\n  });\n\n  return singleInstances.concat(groupInstances);\n}\n\nexport { default as Settings } from './settings';\nexport { default as ExpandableItem } from './expandable-item';\nexport { default as ExpandableGroup } from './expandable-group';\nexport { default as ExpandableAccordion } from './expandable-accordion';\n"],"names":["ExpandableItem","id","options","Object","assign","Settings","Defaults","trigger","document","body","querySelector","Attribute","TRIGGER","target","TARGET","isOpen","this","classList","contains","ClassName","TARGET_OPEN","_setA11yAttributes","open","groupedItem","_onTriggerClick","_triggerClickHandler","bind","addEventListener","evt","preventDefault","closest","toggle","elementId","setAttribute","toString","_removeA11yAttributes","removeAttribute","close","add","TRIGGER_OPEN","remove","dispose","removeEventListener","ExpandableGroup","elements","_elements","expandables","map","getAttribute","_onClick","_onClickHandler","includes","toggleVisibility","forEach","expandable","item","ExpandableAccordion","_ExpandableGroup","_expandableOffsets","update","_resizeId","OdoWindowEvents","onResize","_this","openExpandables","style","transitionDuration","_setHeight","_getOffsets","i","offsetWidth","_animateHeight","_scrollToSelected","scrollY","window","pageYOffset","getBoundingClientRect","top","find","offset","setToOpen","contentHeight","firstElementChild","offsetHeight","height","isTarget","Array","from","querySelectorAll","singleInstances","groupInstances","groupIds","groupId","GROUP","group","filter","el","isAnimated","some","hasAttribute","ANIMATED","push","concat"],"mappings":"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"}