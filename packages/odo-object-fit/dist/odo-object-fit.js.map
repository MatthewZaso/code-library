{"version":3,"file":"odo-object-fit.js","sources":["../src/object-fit.js"],"sourcesContent":["/**\n * @fileoverview A helper which fits media elements (img, video). It polyfills\n * CSS' object-fit: cover and contain. If the browser supports object-fit, it\n * will not run. The media element should have full width and height as well as\n * the object-fit property.\n *\n * Usage:\n *\n *     .my-element {\n *       width: 100%;\n *       height: 100%;\n *       object-fit: cover;\n *     }\n *\n *     // Cover a single element.\n *     ObjectFit.cover(myElement);\n *\n *     // Cover multiple media elements.\n *     ObjectFit.cover([myElement, thatOtherElement]);\n */\n\nclass ObjectFit {\n  constructor(element, style) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */\n    this.element = element;\n\n    /** @type {ObjectFit.Style} */\n    this.style = style;\n\n    /** @private {boolean} */\n    this._isVideo = element.nodeName.toLowerCase() === 'video';\n\n    /** @private {number} */\n    this._mediaRatio = null;\n\n    this._listenForMediaLoad();\n  }\n\n  /**\n   * Calculate the dimenions of the media element and set them.\n   * @param {HTMLElement} el Element to size.\n   * @private\n   */\n  _fit(el) {\n    const container = this._getParentSize();\n    const element = this._getFitSize(container.width, container.height);\n\n    el.style.width = element.width + 'px';\n    el.style.height = element.height + 'px';\n    el.style.marginLeft = ((container.width - element.width) / 2) + 'px';\n    el.style.marginTop = ((container.height - element.height) / 2) + 'px';\n  }\n\n  /**\n   * Retrieve the width and height of the containing block.\n   * @return {{width: number, height: number}}\n   * @private\n   */\n  _getParentSize() {\n    return {\n      width: this.element.parentElement.offsetWidth,\n      height: this.element.parentElement.offsetHeight,\n    };\n  }\n\n  /**\n   * Calculate the width and height of the media element based on the containing\n   * block's width/height and the object-fit style.\n   * @param {number} containerWidth Containing block's width.\n   * @param {number} containerHeight Containing block's height.\n   * @return {{width: number, height: number}}\n   * @private\n   */\n  _getFitSize(containerWidth, containerHeight) {\n    const containerRatio = containerWidth / containerHeight;\n    let elementWidth;\n    let elementHeight;\n\n    if (this.style === ObjectFit.Style.COVER) {\n      // Determine the actual width and height of the image when it's covering the area.\n      if (this._mediaRatio > containerRatio) {\n        elementWidth = containerHeight * this._mediaRatio;\n        elementHeight = containerHeight;\n      } else {\n        elementWidth = containerWidth;\n        elementHeight = containerWidth / this._mediaRatio;\n      }\n    } else /* if this.style === ObjectFit.Style.CONTAIN */ if (this._mediaRatio > containerRatio) {\n      elementWidth = containerWidth;\n      elementHeight = containerWidth / this._mediaRatio;\n    } else {\n      elementWidth = containerHeight * this._mediaRatio;\n      elementHeight = containerHeight;\n    }\n\n    return {\n      width: Math.round(elementWidth),\n      height: Math.round(elementHeight),\n    };\n  }\n\n  /**\n   * Retrieves the media element's width/height ratio.\n   * @return {number}\n   * @private\n   */\n  _getMediaRatio() {\n    if (this._isVideo) {\n      return this.element.videoWidth / this.element.videoHeight;\n    }\n    return this.element.naturalWidth / this.element.naturalHeight;\n  }\n\n  /**\n   * Listen for when the metadata (video width/height) is loaded for videos or\n   * the load event for images.\n   * @return {string}\n   */\n  get _loadEventName() {\n    return this._isVideo ? 'loadedmetadata' : 'load';\n  }\n\n  /** @private */\n  _listenForMediaLoad() {\n    this._mediaLoadedHandler = this._handleMediaLoaded.bind(this);\n\n    if (this._isMediaLoaded(this.element)) {\n      this._mediaLoadedHandler();\n    } else {\n      this.element.addEventListener(this._loadEventName, this._mediaLoadedHandler);\n    }\n  }\n\n  /**\n   * Videos have a readyState. Anything greater than zero means it has metadata.\n   * Some browsers implement the `complete` property on images. Also test the `naturalWidth`.\n   * @param {HTMLImageElement|HTMLVideoElement} element Media element.\n   * @return {boolean}\n   */\n  _isMediaLoaded(element) {\n    return element.readyState > 0 || (element.src && element.complete) || element.naturalWidth > 0;\n  }\n\n  /** @private */\n  _unlistenForMediaLoad() {\n    this.element.removeEventListener(this._loadEventName, this._mediaLoadedHandler);\n  }\n\n  /**\n   * Image loaded, it has `naturalWidth` and `naturalHeight` properties.\n   *\n   * Video metadata loaded, all attributes now contain as much useful information\n   * as they're going to.\n   * @private\n   */\n  _handleMediaLoaded() {\n    this._unlistenForMediaLoad();\n    this._mediaRatio = this._getMediaRatio();\n    this._fit(this.element);\n    this.element = null;\n  }\n\n  /**\n   * Create new object fit objects to cover their container.\n   * @param {ArrayLike.<Element>|Element} elements An array-like of elements or\n   *     a single element.\n   * @static\n   */\n  static cover(elements) {\n    ObjectFit._run(elements, ObjectFit.Style.COVER);\n  }\n\n  /**\n   * Create new object fit objects to be contained in their container.\n   * @param {ArrayLike.<Element>|Element} elements An array-like of elements or\n   *     a single element.\n   * @static\n   */\n  static contain(elements) {\n    ObjectFit._run(elements, ObjectFit.Style.CONTAIN);\n  }\n\n  /**\n   * Gives the ability to pass multiple elements. Fails silently when no elements\n   * are given or exits early if the browser supports object-fit.\n   * @param {ArrayLike.<Element>|Element} elements An array-like of elements or\n   *     a single element.\n   * @param {ObjectFit.Style} type What type of object-fit this is.\n   * @static\n   */\n  static _run(elements, type) {\n    // Exit early if it already supports object-fit.\n    if (ObjectFit.SUPPORTED || !elements || (elements && elements.length === 0)) {\n      return;\n    }\n\n    if (elements.length) {\n      for (let i = 0; i < elements.length; i++) {\n        new ObjectFit(elements[i], type); // eslint-disable-line no-new\n      }\n    } else {\n      new ObjectFit(elements, type); // eslint-disable-line no-new\n    }\n  }\n}\n\n/**\n * Whether the browser supports object-fit.\n * @type {boolean}\n */\nObjectFit.SUPPORTED = document.createElement('div').style.objectFit === '';\n\n/** @enum {number} */\nObjectFit.Style = {\n  COVER: 1,\n  CONTAIN: 2,\n};\n\nexport default ObjectFit;\n"],"names":["ObjectFit","element","style","_isVideo","nodeName","toLowerCase","_mediaRatio","_listenForMediaLoad","_fit","el","container","_getParentSize","_getFitSize","width","height","marginLeft","marginTop","parentElement","offsetWidth","offsetHeight","containerWidth","containerHeight","containerRatio","elementWidth","elementHeight","Style","COVER","Math","round","_getMediaRatio","videoWidth","videoHeight","naturalWidth","naturalHeight","_mediaLoadedHandler","_handleMediaLoaded","bind","_isMediaLoaded","addEventListener","_loadEventName","readyState","src","complete","_unlistenForMediaLoad","removeEventListener","cover","elements","_run","contain","CONTAIN","type","SUPPORTED","length","i","document","createElement","objectFit"],"mappings":"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"}