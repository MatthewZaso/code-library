{"version":3,"file":"odo-dialog.min.js","sources":["../src/scroll-fix.js","../src/dialog.js"],"sourcesContent":["/**\n * @fileoverview Makes an overflowing element scrollable and handles preventing\n * default events and stopping event propagation when the scrollable element is\n * at the top or bottom of the scrollable area.\n *\n * @author Glen Cheney\n */\n\nimport { string } from '@odopod/odo-helpers';\nimport OdoDevice from '@odopod/odo-device';\n\nconst body = document.body;\n\n/**\n * Makes the element scrollable with some smart listeners because iOS\n * behaves unsatisfactory.\n * @param {Element} element Element to use.\n * @param {string} id Unique id.\n * @constructor\n */\nclass ScrollFix {\n  constructor(element, id) {\n    this.element = element;\n    this.id = id;\n    this.startY = null;\n    this.scrollY = null;\n    this._createBoundEvents();\n    this._registerEvents();\n  }\n\n  _createBoundEvents() {\n    this._touchStartBound = this._onTouchStart.bind(this);\n    this._touchMoveBound = this._onTouchMove.bind(this);\n    this._preventDefaultBound = this._preventDefault.bind(this);\n  }\n\n  /**\n   * Add event listeners.\n   * @private\n   */\n  _registerEvents() {\n    body.addEventListener('touchstart', this._touchStartBound);\n    body.addEventListener('touchmove', this._touchMoveBound);\n    document.addEventListener('touchmove', this._preventDefaultBound);\n  }\n\n  /**\n   * Save positions when the touch starts.\n   * @param {TouchEvent} evt Event object.\n   * @private\n   */\n  _onTouchStart(evt) {\n    this.startY = evt.changedTouches[0].pageY;\n    this.scrollY = this.element.scrollTop;\n  }\n\n  /**\n   * When the touch move and touch start events get to the scrollable element,\n   * prevent them from bubbling further.\n   * @param {TouchEvent} evt Event object.\n   * @private\n   */\n  _onTouchMove(evt) {\n    const deltaY = this.startY - evt.changedTouches[0].pageY;\n    const scrollTop = this.scrollY + deltaY;\n\n    // Prevent default stops all further touches...\n    // the user must lift their finger and swipe again before drags in the\n    // opposite direction register.\n    // However, without this, the same thing occurs, but instead of no\n    // scrolling, the page behind the dialog scrolls.\n    if (scrollTop < 0 || scrollTop + this.element.offsetHeight >\n        this.element.scrollHeight) {\n      evt.preventDefault();\n    } else {\n      evt.stopPropagation();\n    }\n  }\n\n  /**\n   * Simply prevent the event's default action.\n   * @param {TouchEvent} evt Event object.\n   * @private\n   */\n  _preventDefault(evt) {\n    evt.preventDefault();\n  }\n\n  /**\n   * Dispose of this instance by removing handlers and DOM references.\n   */\n  dispose() {\n    body.removeEventListener('touchstart', this._touchStartBound);\n    body.removeEventListener('touchmove', this._touchMoveBound);\n    document.removeEventListener('touchmove', this._preventDefaultBound);\n\n    this.element = null;\n    this.id = null;\n  }\n}\n\nexport default {\n  /**\n   * Dictionary of ScrollFix instances.\n   * @type {Object.<string, ScrollFix>}\n   * @private\n   */\n  _fixes: new Map(),\n\n  /**\n   * Enable an element to be scrollable.\n   * @param {Element} element Element to make scrollable.\n   * @return {string} Id which is used to remove it.\n   */\n  add(element) {\n    if (OdoDevice.HAS_TOUCH_EVENTS) {\n      const id = string.random();\n      this._fixes.set(id, new ScrollFix(element, id));\n      return id;\n    }\n\n    return '';\n  },\n\n  /**\n   * Disable scrolling on an element and remove event listeners. Be aware\n   * that this removes the scroll fix class. If your element doesn't have\n   * the overflow-scrolling: touch property on it, iOS may flicker the whole\n   * container when calling this method.\n   * @param {string} id Id returned from enable.\n   */\n  remove(id) {\n    if (this._fixes.has(id)) {\n      this._fixes.get(id).dispose();\n      this._fixes.delete(id);\n    }\n  },\n};\n","/**\n * @fileoverview UI Component for universal dialogs.\n * Notes\n * * The transition is on the main `element` so that `scale()` transforms do not\n * cause the calculation of `scrollHeight` to be artificially increased.\n * * The backdrop is a sibling to the dialog so that it does not cover the\n * scrollbar of the dialog and so that it doesn't jitter in iOS.\n *\n * @author Glen Cheney <glen@odopod.com>\n */\n\nimport TinyEmitter from 'tiny-emitter';\nimport { animation, array } from '@odopod/odo-helpers';\nimport ScrollFix from './scroll-fix';\n\nconst FOCUSABLE_ELEMENTS = [\n  'a[href]',\n  'area[href]',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'iframe',\n  'object',\n  'embed',\n  '[contenteditable]',\n  '[tabindex]:not([tabindex^=\"-\"])',\n].join(',');\n\n/**\n * Dialog that can contain static images, carousels, or videos\n * @param {Element} element Main element.\n *\n * @constructor\n */\nclass Dialog extends TinyEmitter {\n  constructor(element, opts) {\n    super();\n\n    if (!(element instanceof Element)) {\n      throw new TypeError(`OdoDialog requires an element. Got: \"${element}\"`);\n    }\n\n    /**\n     * Base Element.\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Options object.\n     * @type {object}\n     */\n    this.options = Object.assign({}, Dialog.Defaults, opts);\n\n    /**\n     * Dialog Id.\n     * @type {string}\n     */\n    this.id = element.getAttribute('id');\n\n    /**\n     * Dialog backdrop\n     * @type {Element}\n     * @protected\n     */\n    this.backdrop = document.createElement('div');\n    this.backdrop.className = Dialog.Classes.BACKDROP;\n\n    /**\n     * Dialog content (role=document).\n     * @type {Element}\n     * @protected\n     */\n    this.content = this.getByClass(Dialog.Classes.CONTENT);\n\n    /**\n     * Elements which, when clicked, close the dialog.\n     * @type {Element}\n     * @private\n     */\n    this._closers = Array.from(this.element.querySelectorAll('[data-odo-dialog-close]'));\n\n    /**\n     * Window resize Id\n     * @type {string}\n     * @private\n     */\n    this._resizeId = null;\n\n    /**\n     * ScrollFix id\n     * @type {?string}\n     * @private\n     */\n    this._scrollFixId = null;\n\n    /**\n     * Whether the dialog is open.\n     * @type {boolean}\n     */\n    this.isOpen = false;\n\n    /**\n     * Is the dialog currently animating.\n     * @type {boolean}\n     * @protected\n     */\n    this.isAnimating = false;\n\n    /**\n     * Whether the body has a scrollbar.\n     * @type {?boolean}\n     * @private\n     */\n    this._hasBodyScrollbar = null;\n\n    /**\n     * Padding on the body.\n     * @type {number}\n     * @private\n     */\n    this._originalBodyPadding = -1;\n\n    /**\n     * Whether this is a fullscreen dialog. Fullscreen dialogs should not have\n     * paddingRight applied to them.\n     * @type {?boolean}\n     * @private\n     */\n    this._isFullscreen = null;\n\n    Dialog.Instances.push(this);\n\n    if (Dialog.Instances.length === 1) {\n      document.body.addEventListener('click', Dialog._handleTriggerClick);\n    }\n\n    // If this browser does not support auto margins for flexbox, add a class\n    // so that it can be centered differently.\n    this.element.classList.toggle(Dialog.Classes.NO_AUTO_MARGIN, !Dialog.SUPPORTS_AUTO_MARGINS);\n\n    this._bindContexts();\n    this.onResize();\n    this._addA11yAttributes();\n    this._ensureBodyChild();\n  }\n\n  /**\n   * Find descendent element by class.\n   * @param {string} name Name of the class to find.\n   * @return {?Element} The element or undefined.\n   */\n  getByClass(name) {\n    return this.element.getElementsByClassName(name)[0];\n  }\n\n  /**\n   * Bind `this` context to event handlers.\n   */\n  _bindContexts() {\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.close = this.close.bind(this);\n    // Bind undefined as the first parameter so that the event object will be\n    // the second parameter and the optional viewportHeight parameter will work.\n    this.onWindowResize = this.onResize.bind(this, undefined);\n  }\n\n  /**\n   * Add static accessibility attributes so that the implementor can leave them\n   * off or in case they forget.\n   */\n  _addA11yAttributes() {\n    this.element.tabIndex = -1;\n    this.element.setAttribute('aria-hidden', true);\n    this.element.setAttribute('role', 'dialog');\n    this.content.setAttribute('role', 'document');\n  }\n\n  /**\n   * If the dialog element is not a direct descendent of the <body>, make it so.\n   */\n  _ensureBodyChild() {\n    if (this.element.parentNode !== document.body) {\n      document.body.appendChild(this.element);\n    }\n  }\n\n  /**\n   * Determine the correct element to scroll fix and fix it.\n   */\n  _applyScrollFix() {\n    // Allow the scrollable element to be something inside the dialog.\n    if (this.options.scrollableElement) {\n      const element = this.element.matches(this.options.scrollableElement) ?\n        this.element :\n        this.element.querySelector(this.options.scrollableElement);\n      this._scrollFixId = ScrollFix.add(element);\n    }\n  }\n\n  /**\n   * If the page already has a scrollbar, adding overflow: hidden will remove it,\n   * shifting the content to the right. To avoid this, there needs to be padding\n   * on the body that's the same width as the scrollbar, but only when the dialog\n   * will not have a scrollbar to take the page scrollbar's place.\n   * @return {number}\n   */\n  _getScrollbarOffset() {\n    const hasDialogScrollbar = this.element.scrollHeight > document.documentElement.clientHeight;\n    return this._hasBodyScrollbar && !hasDialogScrollbar ? Dialog.SCROLLBAR_WIDTH : 0;\n  }\n\n  /**\n   * Click handler on the main element. When the dialog is dismissable and the\n   * user clicked outside the content (i.e. the backdrop), close it.\n   * @param {Event} evt Event object.\n   * @protected\n   */\n  onClick(evt) {\n    if (this.options.dismissable && evt.target === this.element) {\n      this.close();\n    }\n  }\n\n  /**\n   * Keypress event handler\n   * @param {Event} evt Event object\n   * @protected\n   */\n  onKeyPress(evt) {\n    // If 'ESC' is pressed, close the dialog\n    if (this.options.dismissable && evt.which === Dialog.Keys.ESC) {\n      this.close();\n    }\n\n    // If the TAB key is being pressed, make sure the focus stays trapped within\n    // the dialog element.\n    if (evt.which === Dialog.Keys.TAB) {\n      Dialog._trapTabKey(this.element, evt);\n    }\n  }\n\n  /**\n   * The dialog has a height of 100vh, which, in mobile safari, is incorrect\n   * when the toolbars are visible, not allowing the user to scroll the full\n   * height of the content within it.\n   * The viewportHeight parameter is optional so that it can be read in the open()\n   * method with all the other DOM reads. This avoids read->write->read #perfmatters.\n   * @param {number} [viewportHeight=window.innerHeight] Height of the viewport.\n   * @protected\n   */\n  onResize(viewportHeight = window.innerHeight) {\n    this.element.style.height = viewportHeight + 'px';\n  }\n\n  /**\n   * Checks to see if a dialog is already open or animating If not, opens dialog.\n   * @param {boolean} [sync=false] Whether to open with transitions or not.\n   */\n  open(sync = false) {\n    if (this.isAnimating || this.isOpen) {\n      return;\n    }\n\n    const viewportHeight = window.innerHeight;\n    Dialog.focusedBeforeDialog = document.activeElement;\n    this._hasBodyScrollbar = document.body.clientWidth < window.innerWidth;\n    this._isFullscreen = this.element.classList.contains(Dialog.Classes.FULLSCREEN);\n\n    // Add aria-hidden to other top-level things.\n    const siblings = Dialog._getSiblings(this.element);\n    const originals = siblings.map(element => element.getAttribute('aria-hidden'));\n    siblings.forEach((element, i) => {\n      if (originals[i]) {\n        element.setAttribute('data-odo-dialog-original', originals[i]);\n      }\n      element.setAttribute('aria-hidden', true);\n    });\n\n    this.isOpen = true;\n    this.onResize(viewportHeight);\n    this.element.removeAttribute('aria-hidden');\n    this.element.classList.add(Dialog.Classes.OPEN);\n    this.element.classList.add(Dialog.Classes.ENTER);\n    if (Dialog.SCROLLBAR_WIDTH) {\n      document.body.style.paddingRight = Dialog.SCROLLBAR_WIDTH + 'px';\n    }\n    document.body.classList.add(Dialog.Classes.BODY_OPEN);\n    document.body.insertBefore(this.backdrop, this.element.nextSibling);\n    this.element.scrollTop = 0;\n\n    this._applyScrollFix();\n\n    this.element.focus();\n\n    document.addEventListener('keydown', this.onKeyPress);\n    window.addEventListener('resize', this.onWindowResize);\n    this.element.addEventListener('click', this.onClick);\n    this._closers.forEach((element) => {\n      element.addEventListener('click', this.close);\n    });\n\n    if (sync === true) {\n      this._openNext();\n      this._opened();\n    } else {\n      Dialog._nextFrame(() => {\n        this._openNext();\n        animation.onTransitionEnd(this.element, this._opened, this, null, 1000);\n      });\n    }\n  }\n\n  /**\n   * Start the transition for opening the dialog.\n   */\n  _openNext() {\n    this.isAnimating = true;\n    // Now that the dialog is no longer display:none, the scrollHeight can be measured.\n    const scrollbarOffset = this._getScrollbarOffset();\n    if (!this._isFullscreen && scrollbarOffset > 0) {\n      this.element.style.paddingRight = scrollbarOffset + 'px';\n    }\n\n    this.element.classList.remove(Dialog.Classes.ENTER);\n    this.element.classList.add(Dialog.Classes.ENTERING);\n  }\n\n  /**\n   * Handle the end of the open transition. Emits OPENED event.\n   */\n  _opened() {\n    this.element.classList.remove(Dialog.Classes.ENTERING);\n    this.element.classList.add(Dialog.Classes.VISIBLE);\n    this.isAnimating = false;\n    this.emit(Dialog.EventType.OPENED);\n  }\n\n  /**\n   * Hides dialog\n   * @param {boolean} [sync=false] Whether to close with transitions or not.\n   */\n  close(sync = false) {\n    if (this.isAnimating || !this.isOpen) {\n      return;\n    }\n\n    // Remove aria-hidden to other top-level things.\n    const siblings = Dialog._getSiblings(this.element);\n    const originals = siblings.map(element => element.getAttribute('data-odo-dialog-original'));\n    siblings.forEach((element, i) => {\n      if (originals[i]) {\n        element.setAttribute('aria-hidden', originals[i]);\n        element.removeAttribute('data-odo-dialog-original');\n      } else {\n        element.removeAttribute('aria-hidden');\n      }\n    });\n\n    this.isOpen = false;\n    this.element.classList.add(Dialog.Classes.LEAVE);\n    this.element.classList.remove(Dialog.Classes.VISIBLE);\n\n    ScrollFix.remove(this._scrollFixId);\n\n    // Support: IE11\n    // Clicking on an SVG element inside an <a> will set the `focusedBeforeDialog`\n    // to the SVG, but SVG doesn't have a `focus()` method in IE.\n    if (Dialog.focusedBeforeDialog && typeof Dialog.focusedBeforeDialog.focus === 'function') {\n      Dialog.focusedBeforeDialog.focus();\n    }\n\n    document.removeEventListener('keydown', this.onKeyPress);\n    window.removeEventListener('resize', this.onWindowResize);\n    this.element.removeEventListener('click', this.onClick);\n    this._closers.forEach((element) => {\n      element.removeEventListener('click', this.close);\n    });\n\n    if (sync === true) {\n      this._closeNext();\n      this._closed();\n    } else {\n      Dialog._nextFrame(() => {\n        this._closeNext();\n        animation.onTransitionEnd(this.element, this._closed, this, null, 1000);\n      });\n    }\n  }\n\n  /**\n   * Start the transition for closing the dialog.\n   */\n  _closeNext() {\n    this.isAnimating = true;\n    this.element.classList.remove(Dialog.Classes.LEAVE);\n    this.element.classList.add(Dialog.Classes.LEAVING);\n  }\n\n  /**\n   * Handle the end of the close transition. Emits the CLOSED event.\n   */\n  _closed() {\n    this.isAnimating = false;\n    this.element.style.paddingRight = '';\n    this.element.setAttribute('aria-hidden', true);\n    this.element.classList.remove(Dialog.Classes.OPEN);\n    this.element.classList.remove(Dialog.Classes.LEAVING);\n    document.body.style.paddingRight = '';\n    document.body.classList.remove(Dialog.Classes.BODY_OPEN);\n    document.body.removeChild(this.backdrop);\n    this.emit(Dialog.EventType.CLOSED);\n  }\n\n  /**\n   * Close the dialog, remove event listeners and element references.\n   */\n  dispose() {\n    if (this.isOpen) {\n      this.close(true);\n    }\n\n    this.element = null;\n    this.content = null;\n    this.backdrop = null;\n    this._closers.length = 0;\n\n    array.remove(Dialog.Instances, this);\n\n    // If this is the last dialog (being disposed), remove the body listener.\n    if (Dialog.Instances.length === 0) {\n      document.body.removeEventListener('click', Dialog._handleTriggerClick);\n    }\n  }\n\n  /**\n   * Call a function after two animation frames. Using just one is unreliable\n   * when using animations to/from display:none elements or ones that are not\n   * yet in the DOM.\n   * @param {function} fn Function to call on the next frame.\n   */\n  static _nextFrame(fn) {\n    window.requestAnimationFrame(window.requestAnimationFrame.bind(null, fn));\n  }\n\n  /**\n   * Open the correct dialog when an element with `data-odo-dialog-open` attribute\n   * is clicked.\n   * @param {Event} evt Event object.\n   */\n  static _handleTriggerClick(evt) {\n    const trigger = evt.target.closest('[data-odo-dialog-open]');\n\n    if (trigger !== null) {\n      evt.preventDefault();\n      const id = trigger.getAttribute('data-odo-dialog-open');\n      const instance = Dialog.getDialogById(id);\n      instance.emit(Dialog.EventType.TRIGGER_CLICKED, trigger);\n      instance.open();\n    }\n  }\n\n  /**\n   * Trap the focus inside the given element.\n   * @param {Element} node\n   * @param {Event} evt\n   */\n  static _trapTabKey(node, evt) {\n    const focusableChildren = Dialog._getFocusableChildren(node);\n    const focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n    // If the SHIFT key is being pressed while tabbing (moving backwards) and\n    // the currently focused item is the first one, move the focus to the last\n    // focusable item from the dialog element\n    if (evt.shiftKey && focusedItemIndex === 0) {\n      focusableChildren[focusableChildren.length - 1].focus();\n      evt.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n    } else if (!evt.shiftKey && focusedItemIndex === focusableChildren.length - 1) {\n      focusableChildren[0].focus();\n      evt.preventDefault();\n    }\n  }\n\n  /**\n   * Get the focusable children of the given element.\n   * @param {Element} element\n   * @return {Array.<Element>}\n   */\n  static _getFocusableChildren(element) {\n    return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS))\n      .filter(Dialog._isVisibleElement);\n  }\n\n  /**\n   * Whether an element is visible (and therefore can receive focus). Uses\n   * `getClientRects` due to this issue:\n   * https://github.com/jquery/jquery/issues/2227\n   * http://jsfiddle.net/2tgw2yr3/\n   * @param {Element} el Element.\n   * @return {boolean}\n   */\n  static _isVisibleElement(el) {\n    return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n\n  /**\n   * Retrieve the siblings of an element.\n   * @param {Element} element Element to get siblings for.\n   * @return {Array.<Element>}\n   */\n  static _getSiblings(element) {\n    const children = Array.from(element.parentNode.children);\n    const ignore = ['script', 'link', 'meta'];\n    return children.filter(\n      node => node !== element && !ignore.includes(node.nodeName.toLowerCase()));\n  }\n\n  /**\n   * Calculate the width of the scrollbar because when the body has overflow:hidden,\n   * the scrollbar disappears.\n   * https://davidwalsh.name/detect-scrollbar-width\n   * @return {number}\n   */\n  static _getScrollbarWidth() {\n    // Create measurement node.\n    const scrollDiv = document.createElement('div');\n    scrollDiv.style.cssText = 'width:50px;height:50px;overflow:scroll;position:absolute;top:-9999px;';\n    document.body.appendChild(scrollDiv);\n\n    // Calculate the scrollbar width.\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n    // Remove test element.\n    document.body.removeChild(scrollDiv);\n\n    return scrollbarWidth;\n  }\n\n  /**\n   * Unfortunately, the auto margins do not work for flex children in IE11 and\n   * below because the content element does have an explicit height set on it.\n   * @return {boolean}\n   */\n  static _autoMarginTest() {\n    const parent = document.createElement('div');\n    const child = document.createElement('div');\n    parent.style.cssText = 'display:flex;height:50px;width:50px;position:absolute;';\n    child.style.cssText = 'margin:auto;';\n    child.innerHTML = 'a';\n    parent.appendChild(child);\n    document.body.appendChild(parent);\n\n    const ret = child.offsetTop > 0;\n    document.body.removeChild(parent);\n\n    return ret;\n  }\n\n  /**\n   * Instantiates all instances of dialogs with the same settings\n   * @param {Object} options Object of all dialog options. Is optional.\n   * @return {Dialog[]}\n   */\n  static initializeAll(options) {\n    Dialog.disposeAll();\n\n    return Array.from(\n      document.querySelectorAll('.' + Dialog.Classes.BASE),\n    ).map(dialog => new Dialog(dialog, options));\n  }\n\n  /**\n   * Clear all references to dialogs so there are no duplicates\n   * @param {Object} options Object of all dialog options. Is optional.\n   */\n  static disposeAll() {\n    const clone = Dialog.Instances.slice();\n    clone.forEach((dialog) => {\n      dialog.dispose();\n    });\n  }\n\n  /**\n   * Retrieve a dialog instance by its id.\n   * @param {string} id Id of the dialog.\n   * @return {?Dialog} The dialog or undefined if there is no dialog with the given id.\n   */\n  static getDialogById(id) {\n    return Dialog.Instances.find(instance => instance.id === id);\n  }\n}\n\n/** @enum {string} */\nDialog.Classes = {\n  BODY_OPEN: 'odo-dialog-open',\n  BASE: 'odo-dialog',\n  OPEN: 'odo-dialog--open',\n  ENTER: 'odo-dialog--enter',\n  ENTERING: 'odo-dialog--enter-active',\n  LEAVE: 'odo-dialog--leave',\n  LEAVING: 'odo-dialog--leave-active',\n  VISIBLE: 'odo-dialog--visible',\n  FULLSCREEN: 'odo-dialog--full',\n  NO_AUTO_MARGIN: 'odo-dialog--no-auto-margin',\n  BACKDROP: 'odo-dialog-backdrop',\n  CONTENT: 'odo-dialog__content',\n};\n\n/** @enum {string} */\nDialog.EventType = {\n  OPENED: 'ododialog:open',\n  CLOSED: 'ododialog:closed',\n  TRIGGER_CLICKED: 'ododialog:triggerclicked',\n};\n\n/** @enum {number} */\nDialog.Keys = {\n  ESC: 27,\n  TAB: 9,\n};\n\n/** @type {!Object} */\nDialog.Defaults = {\n  dismissable: true,\n  scrollableElement: '.odo-dialog',\n};\n\n/** @enum {Dialog[]} */\nDialog.Instances = [];\n\nDialog.ScrollFix = ScrollFix;\n\n/**\n * Element which had focus before the dialog opened.\n * @type {Element}\n */\nDialog.focusedBeforeDialog = null;\n\nDialog.SUPPORTS_AUTO_MARGINS = Dialog._autoMarginTest();\nDialog.SCROLLBAR_WIDTH = Dialog._getScrollbarWidth();\n\nexport default Dialog;\n"],"names":["body","document","ScrollFix","element","id","startY","scrollY","_createBoundEvents","_registerEvents","_touchStartBound","this","_onTouchStart","bind","_touchMoveBound","_onTouchMove","_preventDefaultBound","_preventDefault","addEventListener","evt","changedTouches","pageY","scrollTop","deltaY","offsetHeight","scrollHeight","preventDefault","stopPropagation","dispose","removeEventListener","Map","OdoDevice","HAS_TOUCH_EVENTS","string","random","_fixes","set","has","get","delete","FOCUSABLE_ELEMENTS","join","Dialog","opts","_TinyEmitter","Element","TypeError","options","Object","assign","Defaults","getAttribute","backdrop","createElement","className","Classes","BACKDROP","content","_this","getByClass","CONTENT","_closers","Array","from","querySelectorAll","_resizeId","_scrollFixId","isOpen","isAnimating","_hasBodyScrollbar","_originalBodyPadding","_isFullscreen","Instances","push","length","_handleTriggerClick","classList","toggle","NO_AUTO_MARGIN","SUPPORTS_AUTO_MARGINS","_bindContexts","onResize","_addA11yAttributes","_ensureBodyChild","name","getElementsByClassName","onKeyPress","onClick","close","onWindowResize","undefined","tabIndex","setAttribute","parentNode","appendChild","_applyScrollFix","scrollableElement","matches","querySelector","add","_getScrollbarOffset","hasDialogScrollbar","documentElement","clientHeight","SCROLLBAR_WIDTH","dismissable","target","which","Keys","ESC","TAB","_trapTabKey","viewportHeight","window","innerHeight","style","height","open","sync","focusedBeforeDialog","activeElement","clientWidth","innerWidth","contains","FULLSCREEN","siblings","_getSiblings","originals","map","forEach","i","removeAttribute","OPEN","ENTER","paddingRight","BODY_OPEN","insertBefore","nextSibling","focus","_this2","_openNext","_opened","_nextFrame","onTransitionEnd","scrollbarOffset","remove","ENTERING","VISIBLE","emit","EventType","OPENED","LEAVE","_this3","_closeNext","_closed","LEAVING","removeChild","CLOSED","fn","requestAnimationFrame","trigger","closest","instance","getDialogById","TRIGGER_CLICKED","node","focusableChildren","_getFocusableChildren","focusedItemIndex","indexOf","shiftKey","filter","_isVisibleElement","el","offsetWidth","getClientRects","ignore","children","includes","nodeName","toLowerCase","_getScrollbarWidth","scrollDiv","cssText","scrollbarWidth","_autoMarginTest","parent","child","innerHTML","ret","offsetTop","initializeAll","disposeAll","BASE","dialog","slice","find","TinyEmitter"],"mappings":"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"}