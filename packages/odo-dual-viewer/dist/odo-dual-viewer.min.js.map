{"version":3,"file":"odo-dual-viewer.min.js","sources":["../src/settings.js","../src/dual-viewer.js"],"sourcesContent":["export default {\n  Position: {\n    START: 0,\n    CENTER: 1,\n    END: 2,\n    BETWEEN: 3,\n  },\n\n  ClassName: {\n    VERTICAL: 'odo-dual-viewer--vertical',\n    INNER: 'odo-dual-viewer__inner',\n    SCRUBBER_CONTAINER: 'odo-dual-viewer__scrubber-bounds',\n    SCRUBBER: 'odo-dual-viewer__scrubber',\n    OVERLAY: 'odo-dual-viewer__overlay',\n    UNDERLAY: 'odo-dual-viewer__underlay',\n    MEDIA: 'odo-dual-viewer__media',\n\n    // States\n    GRABBING: 'grabbing',\n    CENTERED: 'is-centered',\n    START: 'is-start',\n    END: 'is-end',\n  },\n\n  EventType: {\n    CAME_TO_REST: 'ododualviewer:handlecametorest',\n  },\n\n  Defaults: {\n    startPosition: 0.5,\n    isVertical: false,\n    animationDuration: 300,\n    verticalSafeZone: 0.1,\n    hasZones: true,\n    zones: [0.33, 0.33, 0.66, 0.66],\n  },\n};\n","import TinyEmitter from 'tiny-emitter';\nimport { animation, math } from '@odopod/odo-helpers';\nimport OdoDraggable from '@odopod/odo-draggable';\nimport OdoWindowEvents from '@odopod/odo-window-events';\nimport OdoObjectFit from '@odopod/odo-object-fit';\nimport settings from './settings';\n\nclass DualViewer extends TinyEmitter {\n  /**\n   * Component which has a draggable element in the middle which reveals one or\n   * the other sides as the user drags.\n   *\n   * @constructor\n   */\n  constructor(el, opts) {\n    super();\n\n    this.element = el;\n\n    this.options = Object.assign({}, DualViewer.Defaults, opts);\n\n    this._isVertical = this.options.isVertical;\n\n    /** @private {Element} */\n    this._scrubberEl = null;\n\n    /** @private {Element} */\n    this._overlayEl = null;\n\n    /** @private {Element} */\n    this._underlayEl = null;\n\n    /** @private {Element} */\n    this._overlayObjectEl = null;\n\n    /**\n     * Dragger component\n     * @type {OdoDraggable}\n     * @private\n     */\n    this._draggable = null;\n\n    /**\n     * Boundary for the scrubber.\n     * @type {Rect}\n     * @private\n     */\n    this._scrubberLimits = null;\n\n    /**\n     * The axis to drag depends on the carousel direction.\n     * @type {OdoPointer.Axis}\n     * @private\n     */\n    this._dragAxis = this._isVertical ? 'y' : 'x';\n\n    /**\n     * Height or width.\n     * @type {string}\n     * @private\n     */\n    this._dimensionAttr = this._isVertical ? 'height' : 'width';\n\n    /**\n     * Previous percentage revealed. Needed for window resizes to reset back to\n     * correct position.\n     * @type {number}\n     * @private\n     */\n    this._previousPercent = this.options.startPosition;\n\n    /**\n     * Current position of the dual viewer.\n     * @type {number}\n     * @private\n     */\n    this._position = DualViewer.Position.CENTER;\n\n    /** @private {boolean} */\n    this._isResting = true;\n\n    this.decorate();\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired element.\n   * @return {?Element} The element or null if not found.\n   */\n  getElementByClass(className) {\n    return this.element.querySelector('.' + className);\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired elements.\n   * @return {NodeList} An array like object of elements.\n   */\n  getElementsByClass(className) {\n    return this.element.querySelectorAll('.' + className);\n  }\n\n  decorate() {\n    this._scrubberEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER);\n    this._overlayEl = this.getElementByClass(DualViewer.ClassName.OVERLAY);\n    this._underlayEl = this.getElementByClass(DualViewer.ClassName.UNDERLAY);\n\n    this._overlayObjectEl = this._overlayEl.firstElementChild;\n\n    this._draggable = new OdoDraggable(this._scrubberEl, {\n      axis: this._dragAxis,\n    });\n\n    // Add vertical class if it's vertical and the is-centered class.\n    this.element.classList.toggle(DualViewer.ClassName.VERTICAL, this._isVertical);\n    this.element.classList.add(DualViewer.ClassName.CENTERED);\n\n    this._setupHandlers();\n\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    this.setPosition(this.options.startPosition);\n  }\n\n  _setupHandlers() {\n    this._resizeId = OdoWindowEvents.onResize(this.reset.bind(this));\n    this._onMove = this._handleDragMove.bind(this);\n    this._onEnd = this._handleDragEnd.bind(this);\n\n    this._draggable.on(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.on(OdoDraggable.EventType.END, this._onEnd);\n  }\n\n  /**\n   * Sets the containing box for the scrubber to stay within.\n   * @private\n   */\n  _saveScrubberLimits() {\n    let limits;\n\n    if (this._isVertical) {\n      const top = this._containerHeight * this.options.verticalSafeZone;\n      const height = this._containerHeight * (1 - (this.options.verticalSafeZone * 2));\n      limits = new math.Rect(0, top, this._containerWidth, height);\n    } else {\n      const containingEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER_CONTAINER);\n      const mainRect = this.element.getBoundingClientRect();\n      const containingRect = containingEl.getBoundingClientRect();\n\n      limits = new math.Rect(\n        Math.round(containingRect.left - mainRect.left),\n        containingEl.offsetTop,\n        containingEl.offsetWidth,\n        this._containerHeight,\n      );\n    }\n\n    this._scrubberLimits = limits;\n  }\n\n  /**\n   * Returns the dual viewer's current position.\n   * @return {number} Position number. Look at the DualViewer.\n   *   Position enum for reference.\n   */\n  getPosition() {\n    return this._position;\n  }\n\n  /**\n   * Set the position of the scrubber and the amount revealed.\n   * @param {number} position Percentage to be revealed. A number between zero and one.\n   */\n  setPosition(position) {\n    // Draggable clamps this based on the axis.\n    this._draggable.setPosition(position * 100, position * 100);\n    this._reveal(position);\n  }\n\n  /**\n   * Clamps a percentage value to the boundaries of the scrubber.\n   * @param  {number} percent Number between zero and one.\n   * @return {number} Clamped percentage between the left and right boundaries if\n   *     the dual viewer is horizontal, or the top and bottom boundaries if the\n   *     dual viewer is vertical.\n   * @private\n   */\n  _getLimitedPercent(percent) {\n    const rect = this._scrubberLimits;\n    let min;\n    let max;\n\n    if (this._isVertical) {\n      min = rect.top / this._containerHeight;\n      max = (rect.top + rect.height) / this._containerHeight;\n    } else {\n      min = rect.left / this._containerWidth;\n      max = (rect.left + rect.width) / this._containerWidth;\n    }\n\n    return math.clamp(percent, min, max);\n  }\n\n  /**\n   * Caches the main element's dimensions.\n   * @private\n   */\n  _saveContainerSize() {\n    this._containerWidth = this.element.offsetWidth;\n    this._containerHeight = this.element.offsetHeight;\n  }\n\n  /**\n   * Toggle state classes.\n   * @private\n   */\n  _removeStateClasses() {\n    this.element.classList.remove(\n      DualViewer.ClassName.START,\n      DualViewer.ClassName.END,\n      DualViewer.ClassName.CENTERED,\n    );\n\n    this._isResting = false;\n  }\n\n  /**\n   * Reveals or covers up the second object.\n   * @param {number} percent Number between zero and one.\n   * @private\n   */\n  _reveal(percent) {\n    this._overlayEl.style[this._dimensionAttr] = percent * 100 + '%';\n    this._overlayObjectEl.style[this._dimensionAttr] = 100 / percent + '%';\n  }\n\n  /**\n   * Resets the scrubber position, scrubber limits, draggable position, and amount\n   * revealed based new width/height measurements and the previous position of the\n   * scrubber.\n   */\n  reset() {\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    const percent = this._previousPercent * 100;\n    this._draggable.setPosition(percent, percent);\n\n    this._reveal(this._getLimitedPercent(this._previousPercent));\n  }\n\n  /**\n   * Dragged.\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragMove(evt) {\n    if (this._isResting) {\n      this._removeStateClasses();\n      this._position = DualViewer.Position.BETWEEN;\n    }\n\n    const percentRevealed = evt.position.percent[this._dragAxis] / 100;\n\n    // Save value because if the window is resized, the scrubber will be way off.\n    this._previousPercent = percentRevealed;\n\n    this._reveal(percentRevealed);\n  }\n\n  /**\n   * Dragging ended.\n   *\n   * Default zones shown below.\n   * L = lower zone.\n   * M = middle zone.\n   * U = upper zone.\n   *\n   * +-------------------------------------+\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * |    L     |   |   M   |   |     U    |\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * +-------------------------------------+\n   *         |          |         |\n   *        0.25       0.5       0.75\n   *\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragEnd(evt) {\n    if (!this.options.hasZones) {\n      return;\n    }\n\n    // Percentage revealed.\n    const revealed = evt.position.percent[this._dragAxis] / 100;\n    this._position = this._getZone(revealed);\n\n    let percent = null;\n    switch (this._position) {\n      case DualViewer.Position.START:\n        percent = 0;\n        break;\n      case DualViewer.Position.CENTER:\n        percent = 0.5;\n        break;\n      case DualViewer.Position.END:\n        percent = 1;\n        break;\n      // no default\n    }\n\n    if (percent !== null) {\n      this.animateTo(percent);\n    }\n  }\n\n  _getZone(revealed) {\n    if (revealed > 0 && revealed < this.options.zones[0]) {\n      return DualViewer.Position.START;\n    }\n\n    if (revealed < 1 && revealed > this.options.zones[3]) {\n      return DualViewer.Position.END;\n    }\n\n    if (revealed >= this.options.zones[1] && revealed <= this.options.zones[2]) {\n      return DualViewer.Position.CENTER;\n    }\n\n    return DualViewer.Position.BETWEEN;\n  }\n\n  /**\n   * Animate the dual viewer to a percentage.\n   * @param {number} toPercent Percent to animate to. It will get clamped to the\n   *     scrubber's limits. This is a number between zero and one.\n   */\n  animateTo(toPercent) {\n    // Clamp to boundaries.\n    const percent = this._getLimitedPercent(toPercent);\n\n    // Don't animate if the handle isn't going anywhere.\n    if (percent === this._previousPercent) {\n      return;\n    }\n\n    this._position = this._getZone(percent);\n\n    this._removeStateClasses();\n\n    const stepper = new animation.Stepper({\n      start: this._previousPercent,\n      end: percent,\n      duration: this.options.animationDuration,\n      step: this._animateStep,\n      context: this,\n    });\n\n    stepper.onfinish = this._didComeToRest;\n  }\n\n  /**\n   * The tick function. Sets the handle and revealer.\n   * @param {number} position Applied percentage added to the starting point.\n   * @private\n   */\n  _animateStep(position) {\n    // Move handle.\n    this._draggable.setPosition(position * 100, position * 100);\n\n    // Move reveals.\n    this._reveal(position);\n  }\n\n  /**\n   * Dual Viewer animation came to rest. Toggle classes and states.\n   * @private\n   */\n  _didComeToRest() {\n    this._previousPercent = this._draggable.getPosition(true)[this._dragAxis] / 100;\n    this._isResting = true;\n\n    this.element.classList.toggle(\n      DualViewer.ClassName.START,\n      this._position === DualViewer.Position.START,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.END,\n      this._position === DualViewer.Position.END,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.CENTERED,\n      this._position === DualViewer.Position.CENTER,\n    );\n\n    // Emit event.\n    this.emit(DualViewer.EventType.CAME_TO_REST, {\n      position: this.getPosition(),\n    });\n  }\n\n  /**\n   * Reset the style attribute for the properties we might have manipulated.\n   */\n  dispose() {\n    OdoWindowEvents.remove(this._resizeId);\n\n    this._draggable.off(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.off(OdoDraggable.EventType.END, this._onEnd);\n\n    this._draggable.dispose();\n\n    this.element.classList.remove(\n      DualViewer.ClassName.CENTERED,\n      DualViewer.ClassName.VERTICAL,\n    );\n\n    this.element = null;\n    this._scrubberEl = null;\n    this._overlayObjectEl = null;\n    this._overlayEl = null;\n    this._underlayEl = null;\n  }\n}\n\nObject.assign(DualViewer, settings);\n\nexport default DualViewer;\n"],"names":["DualViewer","el","opts","_TinyEmitter","element","options","Object","assign","Defaults","_isVertical","_this","isVertical","_scrubberEl","_overlayEl","_underlayEl","_overlayObjectEl","_draggable","_scrubberLimits","_dragAxis","_dimensionAttr","_previousPercent","startPosition","_position","Position","CENTER","_isResting","decorate","getElementByClass","className","this","querySelector","getElementsByClass","querySelectorAll","ClassName","SCRUBBER","OVERLAY","UNDERLAY","firstElementChild","OdoDraggable","classList","toggle","VERTICAL","add","CENTERED","_setupHandlers","_saveContainerSize","_saveScrubberLimits","cover","MEDIA","setLimits","setPosition","_resizeId","OdoWindowEvents","onResize","reset","bind","_onMove","_handleDragMove","_onEnd","_handleDragEnd","on","EventType","MOVE","END","limits","top","_containerHeight","verticalSafeZone","height","math","Rect","_containerWidth","containingEl","SCRUBBER_CONTAINER","mainRect","getBoundingClientRect","containingRect","Math","round","left","offsetTop","offsetWidth","getPosition","position","_reveal","_getLimitedPercent","percent","rect","min","max","width","clamp","offsetHeight","_removeStateClasses","remove","START","style","evt","BETWEEN","percentRevealed","hasZones","revealed","_getZone","animateTo","zones","toPercent","animation","Stepper","animationDuration","_animateStep","onfinish","_didComeToRest","emit","CAME_TO_REST","dispose","off","TinyEmitter"],"mappings":"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"}