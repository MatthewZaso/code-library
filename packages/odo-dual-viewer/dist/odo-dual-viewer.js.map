{"version":3,"file":"odo-dual-viewer.js","sources":["../src/settings.js","../src/dual-viewer.js"],"sourcesContent":["export default {\n  Position: {\n    START: 0,\n    CENTER: 1,\n    END: 2,\n    BETWEEN: 3,\n  },\n\n  ClassName: {\n    VERTICAL: 'odo-dual-viewer--vertical',\n    INNER: 'odo-dual-viewer__inner',\n    SCRUBBER_CONTAINER: 'odo-dual-viewer__scrubber-bounds',\n    SCRUBBER: 'odo-dual-viewer__scrubber',\n    OVERLAY: 'odo-dual-viewer__overlay',\n    UNDERLAY: 'odo-dual-viewer__underlay',\n    MEDIA: 'odo-dual-viewer__media',\n\n    // States\n    GRABBING: 'grabbing',\n    CENTERED: 'is-centered',\n    START: 'is-start',\n    END: 'is-end',\n  },\n\n  EventType: {\n    CAME_TO_REST: 'ododualviewer:handlecametorest',\n  },\n\n  Defaults: {\n    startPosition: 0.5,\n    isVertical: false,\n    animationDuration: 300,\n    verticalSafeZone: 0.1,\n    hasZones: true,\n    zones: [0.33, 0.33, 0.66, 0.66],\n  },\n};\n","import TinyEmitter from 'tiny-emitter';\nimport { clamp, Rect, Stepper } from '@odopod/odo-helpers';\nimport OdoDraggable from '@odopod/odo-draggable';\nimport OdoWindowEvents from '@odopod/odo-window-events';\nimport OdoObjectFit from '@odopod/odo-object-fit';\nimport settings from './settings';\n\nclass DualViewer extends TinyEmitter {\n  /**\n   * Component which has a draggable element in the middle which reveals one or\n   * the other sides as the user drags.\n   *\n   * @constructor\n   */\n  constructor(el, opts) {\n    super();\n\n    this.element = el;\n\n    this.options = Object.assign({}, DualViewer.Defaults, opts);\n\n    this._isVertical = this.options.isVertical;\n\n    /** @private {Element} */\n    this._scrubberEl = null;\n\n    /** @private {Element} */\n    this._overlayEl = null;\n\n    /** @private {Element} */\n    this._underlayEl = null;\n\n    /** @private {Element} */\n    this._overlayObjectEl = null;\n\n    /**\n     * Dragger component\n     * @type {OdoDraggable}\n     * @private\n     */\n    this._draggable = null;\n\n    /**\n     * Boundary for the scrubber.\n     * @type {Rect}\n     * @private\n     */\n    this._scrubberLimits = null;\n\n    /**\n     * The axis to drag depends on the carousel direction.\n     * @type {OdoPointer.Axis}\n     * @private\n     */\n    this._dragAxis = this._isVertical ? 'y' : 'x';\n\n    /**\n     * Height or width.\n     * @type {string}\n     * @private\n     */\n    this._dimensionAttr = this._isVertical ? 'height' : 'width';\n\n    /**\n     * Previous percentage revealed. Needed for window resizes to reset back to\n     * correct position.\n     * @type {number}\n     * @private\n     */\n    this._previousPercent = this.options.startPosition;\n\n    /**\n     * Current position of the dual viewer.\n     * @type {number}\n     * @private\n     */\n    this._position = DualViewer.Position.CENTER;\n\n    /** @private {boolean} */\n    this._isResting = true;\n\n    this.decorate();\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired element.\n   * @return {?Element} The element or null if not found.\n   */\n  getElementByClass(className) {\n    return this.element.querySelector('.' + className);\n  }\n\n  /**\n   * Scope the query to the main element.\n   * @param {string} className Class name of the desired elements.\n   * @return {NodeList} An array like object of elements.\n   */\n  getElementsByClass(className) {\n    return this.element.querySelectorAll('.' + className);\n  }\n\n  decorate() {\n    this._scrubberEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER);\n    this._overlayEl = this.getElementByClass(DualViewer.ClassName.OVERLAY);\n    this._underlayEl = this.getElementByClass(DualViewer.ClassName.UNDERLAY);\n\n    this._overlayObjectEl = this._overlayEl.firstElementChild;\n\n    this._draggable = new OdoDraggable(this._scrubberEl, {\n      axis: this._dragAxis,\n    });\n\n    // Add vertical class if it's vertical and the is-centered class.\n    this.element.classList.toggle(DualViewer.ClassName.VERTICAL, this._isVertical);\n    this.element.classList.add(DualViewer.ClassName.CENTERED);\n\n    this._setupHandlers();\n\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    this.setPosition(this.options.startPosition);\n  }\n\n  _setupHandlers() {\n    this._resizeId = OdoWindowEvents.onResize(this.reset.bind(this));\n    this._onMove = this._handleDragMove.bind(this);\n    this._onEnd = this._handleDragEnd.bind(this);\n\n    this._draggable.on(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.on(OdoDraggable.EventType.END, this._onEnd);\n  }\n\n  /**\n   * Sets the containing box for the scrubber to stay within.\n   * @private\n   */\n  _saveScrubberLimits() {\n    let limits;\n\n    if (this._isVertical) {\n      const top = this._containerHeight * this.options.verticalSafeZone;\n      const height = this._containerHeight * (1 - (this.options.verticalSafeZone * 2));\n      limits = new Rect(0, top, this._containerWidth, height);\n    } else {\n      const containingEl = this.getElementByClass(DualViewer.ClassName.SCRUBBER_CONTAINER);\n      const mainRect = this.element.getBoundingClientRect();\n      const containingRect = containingEl.getBoundingClientRect();\n\n      limits = new Rect(\n        Math.round(containingRect.left - mainRect.left),\n        containingEl.offsetTop,\n        containingEl.offsetWidth,\n        this._containerHeight,\n      );\n    }\n\n    this._scrubberLimits = limits;\n  }\n\n  /**\n   * Returns the dual viewer's current position.\n   * @return {number} Position number. Look at the DualViewer.\n   *   Position enum for reference.\n   */\n  getPosition() {\n    return this._position;\n  }\n\n  /**\n   * Set the position of the scrubber and the amount revealed.\n   * @param {number} position Percentage to be revealed. A number between zero and one.\n   */\n  setPosition(position) {\n    // Draggable clamps this based on the axis.\n    this._draggable.setPosition(position * 100, position * 100);\n    this._reveal(position);\n  }\n\n  /**\n   * Clamps a percentage value to the boundaries of the scrubber.\n   * @param  {number} percent Number between zero and one.\n   * @return {number} Clamped percentage between the left and right boundaries if\n   *     the dual viewer is horizontal, or the top and bottom boundaries if the\n   *     dual viewer is vertical.\n   * @private\n   */\n  _getLimitedPercent(percent) {\n    const rect = this._scrubberLimits;\n    let min;\n    let max;\n\n    if (this._isVertical) {\n      min = rect.top / this._containerHeight;\n      max = (rect.top + rect.height) / this._containerHeight;\n    } else {\n      min = rect.left / this._containerWidth;\n      max = (rect.left + rect.width) / this._containerWidth;\n    }\n\n    return clamp(percent, min, max);\n  }\n\n  /**\n   * Caches the main element's dimensions.\n   * @private\n   */\n  _saveContainerSize() {\n    this._containerWidth = this.element.offsetWidth;\n    this._containerHeight = this.element.offsetHeight;\n  }\n\n  /**\n   * Toggle state classes.\n   * @private\n   */\n  _removeStateClasses() {\n    this.element.classList.remove(\n      DualViewer.ClassName.START,\n      DualViewer.ClassName.END,\n      DualViewer.ClassName.CENTERED,\n    );\n\n    this._isResting = false;\n  }\n\n  /**\n   * Reveals or covers up the second object.\n   * @param {number} percent Number between zero and one.\n   * @private\n   */\n  _reveal(percent) {\n    this._overlayEl.style[this._dimensionAttr] = percent * 100 + '%';\n    this._overlayObjectEl.style[this._dimensionAttr] = 100 / percent + '%';\n  }\n\n  /**\n   * Resets the scrubber position, scrubber limits, draggable position, and amount\n   * revealed based new width/height measurements and the previous position of the\n   * scrubber.\n   */\n  reset() {\n    this._saveContainerSize();\n    this._saveScrubberLimits();\n\n    OdoObjectFit.cover(this.getElementsByClass(DualViewer.ClassName.MEDIA));\n\n    this._draggable.setLimits(this._scrubberLimits);\n\n    const percent = this._previousPercent * 100;\n    this._draggable.setPosition(percent, percent);\n\n    this._reveal(this._getLimitedPercent(this._previousPercent));\n  }\n\n  /**\n   * Dragged.\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragMove(evt) {\n    if (this._isResting) {\n      this._removeStateClasses();\n      this._position = DualViewer.Position.BETWEEN;\n    }\n\n    const percentRevealed = evt.position.percent[this._dragAxis] / 100;\n\n    // Save value because if the window is resized, the scrubber will be way off.\n    this._previousPercent = percentRevealed;\n\n    this._reveal(percentRevealed);\n  }\n\n  /**\n   * Dragging ended.\n   *\n   * Default zones shown below.\n   * L = lower zone.\n   * M = middle zone.\n   * U = upper zone.\n   *\n   * +-------------------------------------+\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * |    L     |   |   M   |   |     U    |\n   * |          |   |       |   |          |\n   * |          |   |       |   |          |\n   * +-------------------------------------+\n   *         |          |         |\n   *        0.25       0.5       0.75\n   *\n   * @param {Event} evt Custom event object.\n   * @private\n   */\n  _handleDragEnd(evt) {\n    if (!this.options.hasZones) {\n      return;\n    }\n\n    // Percentage revealed.\n    const revealed = evt.position.percent[this._dragAxis] / 100;\n    this._position = this._getZone(revealed);\n\n    let percent = null;\n    switch (this._position) {\n      case DualViewer.Position.START:\n        percent = 0;\n        break;\n      case DualViewer.Position.CENTER:\n        percent = 0.5;\n        break;\n      case DualViewer.Position.END:\n        percent = 1;\n        break;\n      // no default\n    }\n\n    if (percent !== null) {\n      this.animateTo(percent);\n    }\n  }\n\n  _getZone(revealed) {\n    if (revealed > 0 && revealed < this.options.zones[0]) {\n      return DualViewer.Position.START;\n    }\n\n    if (revealed < 1 && revealed > this.options.zones[3]) {\n      return DualViewer.Position.END;\n    }\n\n    if (revealed >= this.options.zones[1] && revealed <= this.options.zones[2]) {\n      return DualViewer.Position.CENTER;\n    }\n\n    return DualViewer.Position.BETWEEN;\n  }\n\n  /**\n   * Animate the dual viewer to a percentage.\n   * @param {number} toPercent Percent to animate to. It will get clamped to the\n   *     scrubber's limits. This is a number between zero and one.\n   */\n  animateTo(toPercent) {\n    // Clamp to boundaries.\n    const percent = this._getLimitedPercent(toPercent);\n\n    // Don't animate if the handle isn't going anywhere.\n    if (percent === this._previousPercent) {\n      return;\n    }\n\n    this._position = this._getZone(percent);\n\n    this._removeStateClasses();\n\n    const stepper = new Stepper({\n      start: this._previousPercent,\n      end: percent,\n      duration: this.options.animationDuration,\n      step: this._animateStep,\n      context: this,\n    });\n\n    stepper.onfinish = this._didComeToRest;\n  }\n\n  /**\n   * The tick function. Sets the handle and revealer.\n   * @param {number} position Applied percentage added to the starting point.\n   * @private\n   */\n  _animateStep(position) {\n    // Move handle.\n    this._draggable.setPosition(position * 100, position * 100);\n\n    // Move reveals.\n    this._reveal(position);\n  }\n\n  /**\n   * Dual Viewer animation came to rest. Toggle classes and states.\n   * @private\n   */\n  _didComeToRest() {\n    this._previousPercent = this._draggable.getPosition(true)[this._dragAxis] / 100;\n    this._isResting = true;\n\n    this.element.classList.toggle(\n      DualViewer.ClassName.START,\n      this._position === DualViewer.Position.START,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.END,\n      this._position === DualViewer.Position.END,\n    );\n    this.element.classList.toggle(\n      DualViewer.ClassName.CENTERED,\n      this._position === DualViewer.Position.CENTER,\n    );\n\n    // Emit event.\n    this.emit(DualViewer.EventType.CAME_TO_REST, {\n      position: this.getPosition(),\n    });\n  }\n\n  /**\n   * Reset the style attribute for the properties we might have manipulated.\n   */\n  dispose() {\n    OdoWindowEvents.remove(this._resizeId);\n\n    this._draggable.off(OdoDraggable.EventType.MOVE, this._onMove);\n    this._draggable.off(OdoDraggable.EventType.END, this._onEnd);\n\n    this._draggable.dispose();\n\n    this.element.classList.remove(\n      DualViewer.ClassName.CENTERED,\n      DualViewer.ClassName.VERTICAL,\n    );\n\n    this.element = null;\n    this._scrubberEl = null;\n    this._overlayObjectEl = null;\n    this._overlayEl = null;\n    this._underlayEl = null;\n  }\n}\n\nObject.assign(DualViewer, settings);\n\nexport default DualViewer;\n"],"names":["Position","START","CENTER","END","BETWEEN","ClassName","VERTICAL","INNER","SCRUBBER_CONTAINER","SCRUBBER","OVERLAY","UNDERLAY","MEDIA","GRABBING","CENTERED","EventType","CAME_TO_REST","Defaults","startPosition","isVertical","animationDuration","verticalSafeZone","hasZones","zones","DualViewer","el","opts","element","options","Object","assign","_isVertical","_scrubberEl","_overlayEl","_underlayEl","_overlayObjectEl","_draggable","_scrubberLimits","_dragAxis","_dimensionAttr","_previousPercent","_position","_isResting","decorate","getElementByClass","className","querySelector","getElementsByClass","querySelectorAll","firstElementChild","OdoDraggable","axis","classList","toggle","add","_setupHandlers","_saveContainerSize","_saveScrubberLimits","OdoObjectFit","cover","setLimits","setPosition","_resizeId","OdoWindowEvents","onResize","reset","bind","_onMove","_handleDragMove","_onEnd","_handleDragEnd","on","MOVE","limits","top","_containerHeight","height","Rect","_containerWidth","containingEl","mainRect","getBoundingClientRect","containingRect","Math","round","left","offsetTop","offsetWidth","getPosition","position","_reveal","_getLimitedPercent","percent","rect","min","max","width","clamp","offsetHeight","_removeStateClasses","remove","style","evt","percentRevealed","revealed","_getZone","animateTo","toPercent","stepper","Stepper","start","end","duration","step","_animateStep","context","onfinish","_didComeToRest","emit","dispose","off","TinyEmitter","settings"],"mappings":"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"}