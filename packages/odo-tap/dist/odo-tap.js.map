{"version":3,"file":"odo-tap.js","sources":["../src/tap.js"],"sourcesContent":["import { Coordinate, events } from '@odopod/odo-helpers';\nimport OdoPointer from '@odopod/odo-pointer';\n\nlet count = 0;\nfunction uniqueId() {\n  count += 1;\n  return `OdoTap${count}`;\n}\n\n/**\n * Simply prevent the event's default action.\n * @param {Event} evt Event object.\n */\nconst preventDefaultEventAction = (evt) => {\n  evt.preventDefault();\n};\n\nclass Tap {\n  /**\n   * Interprets touchs on an element as taps.\n   * @param {Element} element Element to watch.\n   * @param {Function} fn Callback function when the element is tapped.\n   * @param {boolean} preventEventDefault Whether or not to prevent the default\n   *     event during drags.\n   * @constructor\n   */\n  constructor(element, fn, preventEventDefault) {\n    this.element = element;\n    this.fn = fn;\n    this.preventEventDefault = preventEventDefault;\n    this.pointer = new OdoPointer(element, {\n      preventEventDefault,\n    });\n\n    this._listen();\n  }\n\n  /**\n   * Add listener for the starting event.\n   * @private\n   */\n  _listen() {\n    this._onDragStart = this._handlePointerStart.bind(this);\n    this._onDragMove = this._handlePointerMove.bind(this);\n    this._onDragEnd = this._handlePointerEnd.bind(this);\n    this._onKeyUp = this._handleKeyUp.bind(this);\n\n    this.pointer.on(OdoPointer.EventType.START, this._onDragStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onDragMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onDragEnd);\n    this.element.addEventListener(events.KEYUP, this._onKeyUp);\n\n    // Prevent clicks from triggering things.\n    if (this.preventEventDefault) {\n      this.element.addEventListener(events.CLICK, preventDefaultEventAction);\n    }\n  }\n\n  /**\n   * Whether the current drag event has gone past the maximum threshold.\n   * @return {boolean}\n   * @private\n   */\n  _isPastThreshold() {\n    return Coordinate.distance(this.pointer.pageStart, this.pointer.page) > Tap.MAX_MOVEMENT;\n  }\n\n  /**\n   * Mouse/pointer down or touch start.\n   * @private\n   */\n  _handlePointerStart() {\n    this.hasDragged = false;\n  }\n\n  /**\n   * User's pointer moved.\n   * @private\n   */\n  _handlePointerMove() {\n    if (!this.hasDragged) {\n      this.hasDragged = this._isPastThreshold();\n    }\n  }\n\n  /**\n   * Dragging ended.\n   * @private\n   */\n  _handlePointerEnd(evt) {\n    if (!evt.isCancelEvent && this.pointer.deltaTime < Tap.MAX_TIME &&\n        !this.hasDragged) {\n      // Assume default should be prevented. Return true from the callback to\n      // allow the default event action.\n      if (this.fn(evt) !== true) {\n        evt.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * When the user presses the spacer bar or enter/return on their keyboard, it\n   * should be considered a \"tap\" as well.\n   * @param {KeyboardEvent} evt Event object.\n   */\n  _handleKeyUp(evt) {\n    if (evt.which === 13 || evt.which === 32) {\n      this.fn(evt);\n      evt.preventDefault();\n    }\n  }\n\n  /**\n   * Destroy instance.\n   */\n  dispose() {\n    this.element.removeEventListener(events.CLICK, preventDefaultEventAction);\n    this.element.removeEventListener(events.KEYUP, this._onKeyUp);\n    this.pointer.on(OdoPointer.EventType.START, this._onDragStart);\n    this.pointer.on(OdoPointer.EventType.MOVE, this._onDragMove);\n    this.pointer.on(OdoPointer.EventType.END, this._onDragEnd);\n    this.pointer.dispose();\n    this.element = null;\n    this.fn = null;\n  }\n\n  /**\n   * Listens for taps on an element.\n   * @param {Element} element Element.\n   * @param {Function} fn Callback.\n   * @param {boolean=} preventDefault Optionally prevent the default event\n   *     during drag start and move.\n   * @return {string} The id to use to remove the listeners.\n   */\n  static addListener(element, fn, preventDefault = false) {\n    const id = uniqueId();\n    Tap._listeners.set(id, new Tap(element, fn, preventDefault));\n    return id;\n  }\n\n  /**\n   * Stop listening for taps on an element.\n   * @param {string} id Id returned from addListener.\n   */\n  static remove(id) {\n    if (Tap._listeners.get(id)) {\n      Tap._listeners.get(id).dispose();\n      Tap._listeners.delete(id);\n    }\n  }\n}\n\n/**\n * Maximum distance the user can tap and drag for the interaction to still\n * count as a tap.\n * @const {number}\n */\nTap.MAX_MOVEMENT = 10;\n\n/**\n * Maximum time between tap down and tap up for the interaction to still\n * count as a tap.\n * @const {number}\n */\nTap.MAX_TIME = 250;\n\n/**\n * Map of unique keys and tap instances.\n * @type {Map.<string, Tap>}\n * @private\n */\nTap._listeners = new Map();\n\nexport default Tap;\n"],"names":["count","uniqueId","preventDefaultEventAction","evt","preventDefault","Tap","element","fn","preventEventDefault","pointer","OdoPointer","_listen","_onDragStart","_handlePointerStart","bind","_onDragMove","_handlePointerMove","_onDragEnd","_handlePointerEnd","_onKeyUp","_handleKeyUp","on","EventType","START","MOVE","END","addEventListener","events","KEYUP","CLICK","_isPastThreshold","Coordinate","distance","pageStart","page","MAX_MOVEMENT","hasDragged","isCancelEvent","deltaTime","MAX_TIME","which","dispose","removeEventListener","addListener","id","_listeners","set","remove","get","delete","Map"],"mappings":"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"}